
Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00002256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800100  00800100  00002256  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002256  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  000022a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000053e2  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a50  00000000  00000000  0000795a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003141  00000000  00000000  000093aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000688  00000000  00000000  0000c4ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000021e3  00000000  00000000  0000cb74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e53  00000000  00000000  0000ed57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  00011baa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__ctors_end>
       4:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
       8:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
       c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      10:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      14:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      18:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      1c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      20:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      24:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      28:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__vector_10>
      2c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      30:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      34:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      38:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      3c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      40:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      44:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      48:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      4c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      50:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      54:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      58:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      5c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      60:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      64:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      68:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      6c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      70:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      74:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      78:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      7c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      80:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      84:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      88:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      8c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      90:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      94:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      98:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      9c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      a0:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      a4:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>
      a8:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__bad_interrupt>

000000ac <ProductString>:
      ac:	24 03 50 00 4f 00 4b 00 4b 00 45 00 4e 00 20 00     $.P.O.K.K.E.N. .
      bc:	43 00 4f 00 4e 00 54 00 52 00 4f 00 4c 00 4c 00     C.O.N.T.R.O.L.L.
      cc:	45 00 52 00 00 00                                   E.R...

000000d2 <ManufacturerString>:
      d2:	1c 03 48 00 4f 00 52 00 49 00 20 00 43 00 4f 00     ..H.O.R.I. .C.O.
      e2:	2e 00 2c 00 4c 00 54 00 44 00 2e 00 00 00           ..,.L.T.D.....

000000f0 <LanguageString>:
      f0:	04 03 09 04                                         ....

000000f4 <ConfigurationDescriptor>:
      f4:	09 02 29 00 01 01 00 80 fa 09 04 00 00 02 03 00     ..).............
     104:	00 00 09 21 11 01 00 01 22 56 00 07 05 02 03 40     ...!...."V.....@
     114:	00 08 07 05 81 03 40 00 08                          ......@..

0000011d <DeviceDescriptor>:
     11d:	12 01 00 02 00 00 00 40 0d 0f 92 00 00 01 01 02     .......@........
     12d:	00 01                                               ..

0000012f <JoystickReport>:
     12f:	05 01 09 05 a1 01 15 00 25 01 35 00 45 01 75 01     ........%.5.E.u.
     13f:	95 10 05 09 19 01 29 10 81 02 05 01 25 07 46 3b     ......).....%.F;
     14f:	01 75 04 95 01 65 14 09 39 81 42 65 00 95 01 81     .u...e..9.Be....
     15f:	01 26 ff 00 46 ff 00 09 30 09 31 09 32 09 35 75     .&..F...0.1.2.5u
     16f:	08 95 04 81 02 06 00 ff 09 20 95 01 81 02 0a 21     ......... .....!
     17f:	26 95 08 91 02 c0                                   &.....

00000185 <image_data>:
     185:	bb ff af ae 4a 48 51 84 00 d0 b6 6d db 76 ef ff     ....JHQ....m.v..
     195:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff bb ed     ................
     1a5:	77 f7 5e b7 fd ff ff ff ff 7f 7b fb 37 75 25 49     w.^.......{.7u%I
     1b5:	94 aa 7b ff ff ff bf 6d fb ff ff ff ff 7f bb ff     ..{....m........
     1c5:	ff ff ff ff ff 6e ff bf fd dd fb ff ff ff ff ff     .....n..........
     1d5:	fb ff df df 56 c9 8a 24 69 57 ed 6d ab ed fd b6     ....V..$iW.m....
     1e5:	af da b6 dd b6 ed ff 6d 77 f7 ff ff ed ff 6d fb     .......mw.....m.
     1f5:	6f bf 6d fb ef ff ff ff 6d b7 ed bd ad 12 51 92     o.m.....m.....Q.
     205:	92 fa 56 db 5e 5b d7 7b dd ed fd fb dd f7 b6 ff     ..V.^[.{........
     215:	bf bf b5 dd 7f db b7 6d bb fb bf d7 7e ff ff ff     .......m....~...
     225:	ff ff fb f7 57 b5 ad 6d ff ad bb b6 b5 da 3e cd     ....W..m......>.
     235:	b2 5d ab 56 bb 5e 6f db fa ed de fb fe bf fe bf     .].V.^o.........
     245:	ff ad f6 fe f7 ff ff ff ff 7f df 7f df ee fb fe     ................
     255:	6d df dd 6a 6b a5 b2 52 2b a9 56 ad 75 b5 fd b6     m..jk..R+.V.u...
     265:	d7 de ef 6e b7 ff b7 fb 6d ff ed bd fd ff ff ff     ...n....m.......
     275:	b6 ed f7 bf fb 7b df b7 db 76 77 cb ee 2a 65 25     .....{...vw..*e%
     285:	54 25 d9 da a6 eb 52 db be bb 7d b7 fb ea ff dd     T%....R...}.....
     295:	ff f7 bf 77 bf fb ff ff ff ff ef ff bf dd fb 7f     ...w............
     2a5:	bf db aa 5d 95 d5 8a 48 22 92 20 11 59 56 ab 6d     ...]...H". .YV.m
     2b5:	69 db ea de 6d 5f fd ff ff bf 7b ef fb ff ff ff     i...m_....{.....
     2c5:	fb ff fd fb df ee 6e ed 75 db 5e bb 5a 95 14 01     ......n.u.^.Z...
     2d5:	88 00 05 22 22 29 dd b6 d7 b6 57 6b df f7 ef ff     ..."")....Wk....
     2e5:	ef fe df bd 6d df ff ff ff f6 ff ff ff bb b7 db     ....m...........
     2f5:	d6 56 b5 d5 a5 2a 51 92 00 08 10 44 84 90 90 54     .V...*Q....D...T
     305:	da 6a bd bd ed fe ff ff ff ff ff 77 df fd ff ff     .j.........w....
     315:	df ff ff bf bb 77 db 2a 8d 88 6a 6b 5b 44 02 08     .....w.*..jk[D..
     325:	00 20 80 00 00 00 49 a9 2a ad 6a eb 7b ff ff ff     . ....I.*.j.{...
     335:	ff ff ff ff fb f7 fe ff fd ff ff ff ff ae 15 00     ................
     345:	00 00 80 94 aa 12 88 00 49 02 01 00 00 04 20 92     ........I..... .
     355:	d5 d2 d6 b6 fe f7 ff ff ff ff ff 6f b7 fe ff ff     ...........o....
     365:	ff bf ff ff bf 11 22 91 20 24 09 48 44 24 11 44     ......". $.HD$.D
     375:	00 00 00 00 00 40 04 25 a4 56 55 dd b7 ff ff ff     .....@.%.VU.....
     385:	ff ff ff fe df 6f ff ff ff ff ff 7f 5b 22 09 00     .....o......["..
     395:	04 01 50 21 09 81 80 00 00 20 00 00 00 00 00 90     ..P!..... ......
     3a5:	4a b4 aa 7b ff ff ff ff ff ff ff ff fd fb ff ff     J..{............
     3b5:	ff ff ff ff 57 4a 52 02 00 40 04 92 90 24 04 10     ....WJR..@...$..
     3c5:	22 02 00 00 00 00 20 42 a8 22 b5 ed fe ff 7f 6b     "..... B.".....k
     3d5:	ff ff ff ff ff b6 fd ff ff ff ff ff bf 24 12 90     .............$..
     3e5:	20 08 82 00 22 08 48 82 00 00 04 00 00 00 00 08      ...".H.........
     3f5:	11 4d 75 db ff ff ff 9f d0 ff ff ff bf ed f7 ff     .Mu.............
     405:	ff f7 fd ff ad 44 24 00 04 41 10 2a 45 41 01 00     .....D$..A.*EA..
     415:	10 91 00 00 00 00 00 20 a5 a8 aa ed ff ff ff ff     ....... ........
     425:	05 fd ff ff 57 5d ff ff ff ff ff ff 5f 89 48 09     ....W]......_.H.
     435:	00 10 22 91 88 14 92 24 04 00 00 00 00 00 80 44     .."....$.......D
     445:	92 44 dd fe ff ff ff ff ab 6a ff df da b2 da ff     .D.......j......
     455:	ff ff ff ff 2f 49 12 40 90 84 44 44 12 22 20 80     ..../I.@..DD." .
     465:	40 22 04 00 00 00 00 88 48 52 b3 ff ff ff ff ff     @"......HR......
     475:	57 d2 f6 7f 37 65 fb ff ff ff ff ff bf 24 24 02     W...7e.......$$.
     485:	01 20 48 2a 69 44 05 09 08 08 21 00 00 00 00 10     . H*iD....!.....
     495:	02 a9 f6 ff ff 9f fb ff 0f 55 bb ed 25 49 b5 ff     .........U..%I..
     4a5:	ff ff ff ff 5f 89 44 10 24 55 b3 52 45 89 48 10     ...._.D.$U.RE.H.
     4b5:	41 00 08 00 00 00 00 22 91 a4 ed fb ff 1f de fe     A......"........
     4c5:	2f a9 fe 5f aa 94 6a ff ff ff ff ff 3f 11 09 21     /.._..j.....?..!
     4d5:	d2 4a 4d ad 9a 32 22 42 84 a4 80 00 00 00 00 88     .JM..2"B........
     4e5:	08 48 6d f5 ff ff fd ff 5e da b5 b5 12 22 d4 fd     .Hm.....^...."..
     4f5:	ff ff ff ff 7f a2 34 4a 95 bd fb db 6a 25 89 84     ......4J....j%..
     505:	10 00 25 00 00 00 00 00 20 b5 bb fa fb ff ff fd     ..%..... .......
     515:	af d6 7f 4b 49 40 a9 ff ff ff ff ff bf 44 a2 b4     ...KI@.......D..
     525:	fb f7 56 5b 57 cd 14 28 40 12 00 02 00 00 00 29     ..V[W..(@......)
     535:	85 a4 56 70 df ff bf df 5f b5 d6 4a 84 14 12 ed     ..Vp...._..J....
     545:	ff ff ff ff 77 49 6d ef ff 0e 00 00 a8 9a a2 41     ....wIm........A
     555:	0a 20 92 10 00 00 00 80 00 52 25 e9 7f fb ef ff     . .......R%.....
     565:	ad 7d ab 2a 12 82 a0 fa ff ff ff ff ff 94 f6 ff     .}.*............
     575:	05 08 03 00 00 50 4d 0a 21 09 21 04 00 00 00 10     .....PM.!.!.....
     585:	90 a8 89 c2 f7 6f 7b bb f6 d6 54 45 21 20 25 dd     .....o{...TE! %.
     595:	ff ff ff ff ff ea fd 5b ea ff ff 7f 00 80 94 54     .......[.......T
     5a5:	84 00 00 01 00 00 00 04 00 40 12 a4 ff bd dd 55     .........@.....U
     5b5:	ad 09 49 2a 84 04 48 f2 ff ff ff ff ff f7 bf d2     ..I*..H.........
     5c5:	ff ff ff ff 3f 04 a8 24 09 92 24 08 00 00 00 80     ....?..$..$.....
     5d5:	04 82 04 29 09 92 00 92 10 49 92 44 02 90 90 a4     ...).....I.D....
     5e5:	ff ff ff ff ff 7d ff ff ff ff ff ff ff 17 40 89     .....}........@.
     5f5:	50 00 80 40 00 00 00 00 20 10 68 12 00 00 00 48     P..@.... .h....H
     605:	22 92 24 11 50 02 09 6d ff ff ff ff ff ff fb ff     ".$.P..m........
     615:	ff ff ff 03 da ff 01 12 81 24 00 12 00 00 00 20     .........$..... 
     625:	00 00 00 00 40 00 55 22 45 04 49 22 01 20 20 51     ....@.U"E.I".  Q
     635:	ff ff ff ff ff ff ff ff ff ff ff 0f 80 fe 2f 20     ............../ 
     645:	0a 00 09 00 00 00 00 00 00 82 00 00 00 48 00 10     .............H..
     655:	88 28 92 08 08 04 49 ca ff ff ff ff ff 6f ff ff     .(....I......o..
     665:	ff ff ff ff 00 00 dd 46 20 02 00 04 00 00 00 00     .......F .......
     675:	11 00 00 00 00 00 80 84 10 51 04 00 40 20 84 24     .........Q..@ .$
     685:	ff ff ff ff ff ff ff ff ff ff ff ff 01 20 b2 8d     ............. ..
     695:	00 00 80 20 00 00 00 00 00 00 00 00 00 00 49 40     ... ..........I@
     6a5:	22 82 20 00 01 82 10 a9 ff ff ff ff ff ff ff ff     ". .............
     6b5:	ff 1f fe ff 05 42 d4 3a 05 00 00 00 00 00 00 00     .....B.:........
     6c5:	80 00 00 00 00 10 00 12 44 08 02 00 00 10 48 44     ........D.....HD
     6d5:	ff ff ff ff ff ff 7f ff ff 3f bf dd 06 00 22 55     .........?...."U
     6e5:	00 00 00 00 01 00 00 00 04 08 00 00 00 00 04 00     ................
     6f5:	00 00 00 20 10 00 81 28 ff ff ff ff ff ff ff fd     ... ...(........
     705:	ff ff fd 7f 43 88 00 82 00 00 00 00 00 00 00 00     ....C...........
     715:	00 80 00 00 00 80 20 80 00 00 00 00 80 44 24 51     ...... ......D$Q
     725:	ff ff ff ff ff ff af ff ff ff ff ff 07 22 49 08     ............."I.
     735:	00 00 00 00 00 00 00 00 20 00 00 00 40 04 00 00     ........ ...@...
     745:	00 00 00 00 00 20 08 a2 ff ff ff ff ff ff 5f fe     ..... ........_.
     755:	df fe af ed 0e 40 24 01 00 00 00 00 00 00 00 00     .....@$.........
     765:	00 11 08 00 02 00 00 00 00 00 00 00 08 00 21 85     ..............!.
     775:	ff ff ff ff ff ff ba fa bf ff fb bf 55 09 00 00     ............U...
     785:	00 00 00 00 00 00 00 00 00 00 80 40 00 00 00 00     ...........@....
     795:	00 00 00 00 80 04 44 58 ff ff ff ff ff ff d7 fd     ......DX........
     7a5:	ff 55 f7 ee 22 02 00 00 00 00 00 20 00 00 00 00     .U.."...... ....
     7b5:	00 80 00 08 00 00 00 00 00 00 00 00 00 90 10 21     ...............!
     7c5:	ff ff ff ff ff 6f bf d2 fe ff 5e 11 0a 00 00 00     .....o....^.....
     7d5:	00 00 00 00 00 00 00 00 00 12 04 00 00 00 00 00     ................
     7e5:	00 00 00 00 00 00 82 84 ff ff ff ff ff ff ed af     ................
     7f5:	49 2a 01 02 00 00 00 00 00 00 00 00 00 00 00 00     I*..............
     805:	00 00 20 00 00 00 00 00 00 00 00 00 22 49 48 28     .. ........."IH(
     815:	ff ff ff ff ff bd 5b 7b 97 04 20 24 00 80 00 00     ......[{.. $....
     825:	00 00 00 09 00 00 00 00 00 80 00 01 00 00 00 00     ................
     835:	00 00 00 00 00 00 10 51 ff ff ff ff ff ef b6 d6     .......Q........
     845:	5a db 4a 00 00 10 00 00 00 00 20 40 02 00 00 00     Z.J....... @....
     855:	00 00 00 08 00 00 00 00 00 00 00 00 00 80 02 82     ................
     865:	ff ff ff ff bf 7f 6b 29 21 00 00 01 49 02 00 00     ......k)!...I...
     875:	00 00 00 00 00 00 00 00 00 00 12 00 00 00 00 00     ................
     885:	00 00 00 00 00 12 90 24 ff ff ff ff ff aa 94 92     .......$........
     895:	44 12 24 24 00 00 00 00 00 00 02 11 00 00 00 00     D.$$............
     8a5:	00 20 80 40 00 00 00 00 00 00 00 00 00 00 44 48     . .@..........DH
     8b5:	ff ff ff ff ff 57 4b 4a 8a a4 80 88 24 01 00 00     .....WKJ....$...
     8c5:	00 40 20 00 01 00 00 00 00 00 00 12 04 00 00 00     .@ .............
     8d5:	00 00 00 00 20 40 00 82 ff ff ff ff 5f 5b 32 29     .... @......_[2)
     8e5:	11 01 49 10 01 00 00 00 00 00 00 04 00 00 00 00     ..I.............
     8f5:	00 00 24 00 00 00 00 00 00 00 00 00 00 09 49 94     ..$...........I.
     905:	ff ff ff ff bf 8a 44 92 24 4a 12 05 00 00 00 00     ......D.$J......
     915:	00 08 08 91 08 00 00 00 00 00 00 09 00 00 00 00     ................
     925:	00 00 00 00 02 00 80 20 ff ff ff ff ef 92 88 44     ....... .......D
     935:	52 24 04 00 00 00 00 00 00 00 00 00 40 00 00 00     R$..........@...
     945:	00 00 00 20 01 00 00 00 00 00 00 00 00 80 08 02     ... ............
     955:	ff ff ff ff 5f 25 00 00 80 00 00 00 00 00 00 00     ...._%..........
     965:	00 00 41 48 02 00 00 00 00 00 80 00 24 01 00 00     ..AH........$...
     975:	00 00 00 00 00 10 10 a9 ff ff ff ff 3b 01 02 00     ............;...
     985:	08 00 00 00 00 00 00 00 00 00 00 02 08 00 00 00     ................
     995:	00 00 00 a4 00 00 00 00 00 00 00 40 40 02 41 40     ...........@@.A@
     9a5:	ff ff ff ff af 04 00 00 00 00 00 00 00 00 00 00     ................
     9b5:	00 20 24 90 40 00 00 00 00 00 00 00 12 08 00 00     . $.@...........
     9c5:	00 00 00 00 00 00 04 12 ff ff ff ff 57 12 00 00     ............W...
     9d5:	00 00 00 00 00 00 00 00 00 00 00 41 02 02 00 00     ...........A....
     9e5:	00 00 00 40 40 42 00 00 00 00 00 00 08 90 20 44     ...@@B........ D
     9f5:	ff ff ff ff 2e 01 00 00 00 00 00 00 00 00 00 00     ................
     a05:	00 00 02 12 24 00 00 00 00 00 00 00 04 00 12 02     ....$...........
     a15:	00 00 00 00 00 02 80 20 ff ff ff ff b5 08 00 00     ....... ........
     a25:	00 00 00 00 00 00 00 00 00 00 90 88 00 00 00 00     ................
     a35:	00 00 00 00 90 08 40 10 01 00 00 00 40 00 09 12     ......@.....@...
     a45:	ff ff ff ff 96 40 00 00 00 00 00 00 00 00 00 00     .....@..........
     a55:	00 40 40 20 89 00 00 00 00 00 00 80 00 22 01 00     .@@ ........."..
     a65:	00 00 00 22 02 48 10 41 ff ff ff ff 2d 05 00 00     ...".H.A....-...
     a75:	00 00 00 00 00 00 00 00 00 00 02 12 22 00 00 00     ............"...
     a85:	00 00 00 00 22 00 4a 92 24 89 08 00 00 00 42 48     ....".J.$.....BH
     a95:	ff ff ff bf 55 00 00 00 00 00 00 00 00 00 00 00     ....U...........
     aa5:	00 00 48 52 00 04 00 00 00 00 00 00 48 49 10 21     ..HR........HI.!
     ab5:	00 00 40 00 90 84 20 92 ff ff ff ff ae 12 00 00     ..@... .........
     ac5:	00 00 00 00 00 00 00 00 00 00 20 84 15 00 00 00     .......... .....
     ad5:	00 00 00 20 00 22 00 84 4a 02 00 40 00 10 04 49     ... ."..J..@...I
     ae5:	ff ff ff 7f 2b 01 00 00 00 00 00 00 00 00 00 00     ....+...........
     af5:	00 00 11 29 42 42 00 00 00 00 00 80 2a 90 4a 12     ...)BB......*.J.
     b05:	10 28 01 02 22 42 92 90 ff ff ff bf 55 00 00 00     .(.."B......U...
     b15:	00 00 00 00 00 00 00 00 00 00 84 40 08 00 00 00     ...........@....
     b25:	00 00 00 08 51 05 91 20 a1 04 12 08 10 21 20 25     ....Q.. .....! %
     b35:	ff ff ff ff 96 12 00 00 00 00 00 00 00 00 00 00     ................
     b45:	00 40 20 24 49 04 00 00 00 00 00 20 8a 28 02 00     .@ $I...... .(..
     b55:	0a 21 40 40 04 08 45 ca ff ff ff 5f 29 01 00 00     .!@@..E...._)...
     b65:	00 00 00 00 00 00 00 00 00 00 09 11 21 21 04 00     ............!!..
     b75:	00 00 00 51 25 d5 2a 49 40 44 09 01 42 42 88 90     ...Q%.*I@D..BB..
     b85:	ff ff ff bf 15 00 00 00 00 00 00 00 00 00 00 00     ................
     b95:	00 00 42 80 04 00 00 00 00 00 20 84 b4 25 15 00     ..B....... ..%..
     ba5:	10 12 22 24 20 24 29 6d ff ff ff 7f 4b 12 01 00     .."$ $)m....K...
     bb5:	00 00 00 00 00 00 00 00 00 20 09 4a 54 92 90 00     ......... .JT...
     bc5:	00 00 04 52 ed 7e 43 00 01 20 10 42 92 88 52 49     ...R.~C.. .B..RI
     bd5:	ff ff ff 5f 22 00 00 00 00 00 00 00 00 00 00 00     ..._"...........
     be5:	00 40 50 10 82 04 01 92 84 88 40 52 db d5 8a 24     .@P.......@R...$
     bf5:	88 44 45 08 01 11 c9 b6 ff ff ff df 04 01 00 00     .DE.............
     c05:	00 00 00 00 00 00 00 00 00 90 82 84 08 10 4a 24     ..............J$
     c15:	10 40 48 aa be 9b 14 00 00 08 22 91 54 aa 94 6a     .@H.......".T..j
     c25:	ff ff ff bf 95 00 00 00 00 00 00 00 00 00 00 00     ................
     c35:	00 00 15 21 50 49 a4 88 22 25 92 f4 b5 6e 23 80     ...!PI.."%...n#.
     c45:	40 20 08 42 48 42 6a d5 ff ff ff 2f 22 48 10 00     @ .BHBj..../"H..
     c55:	00 00 00 00 00 00 00 00 00 20 28 12 81 a4 08 11     ......... (.....
     c65:	49 92 a4 95 6b b5 44 12 04 41 91 24 82 94 55 5b     I...k.D..A.$..U[
     c75:	ff ff ff 7f 09 04 00 00 00 00 00 00 00 00 00 00     ................
     c85:	00 c0 42 84 0c 10 53 ab 24 49 2d bb d6 4a 12 00     ..B...S.$I-..J..
     c95:	20 04 22 89 94 28 aa b6 ff ff ff 5f 41 00 02 00      ."..(....._A...
     ca5:	00 00 00 00 00 00 00 00 00 00 ad 12 b1 d5 ee 56     ...............V
     cb5:	95 5a 69 6a 95 24 01 80 00 28 04 10 21 51 75 d5     .Zij.$...(..!Qu.
     cc5:	ff ff ff af 12 01 00 00 00 00 00 00 00 00 00 00     ................
     cd5:	00 00 5a a9 a4 ee ff ff b6 d5 d6 d5 2a 11 80 04     ..Z.........*...
     ce5:	92 40 a8 52 44 8a aa 29 ff ff ff 3f 09 24 00 00     .@.RD..)...?.$..
     cf5:	00 00 00 00 00 00 00 00 00 00 a5 4a db ff ff ff     ...........J....
     d05:	5f ab 9a 2e 01 02 04 20 00 81 44 22 12 52 55 a6     _...... ..D".RU.
     d15:	ff ff ff 6f a2 80 10 00 00 00 00 00 00 00 00 00     ...o............
     d25:	00 00 b8 b5 7a bd 6d b5 ff b6 b5 29 49 40 10 00     ....z.m....)I@..
     d35:	49 14 02 84 a0 a4 aa 48 ff ff ff 5f 09 02 04 00     I......H..._....
     d45:	00 00 00 00 00 00 00 00 00 00 d0 56 a5 65 db 6e     ...........V.e.n
     d55:	a9 5a 6b 45 00 00 80 08 10 22 91 28 45 24 55 a9     .ZkE.....".(E$U.
     d65:	ff ff ff b7 24 48 80 00 00 00 00 00 00 00 00 00     ....$H..........
     d75:	00 00 a0 bb ad d6 aa 49 4b a5 4a 8a 00 12 01 40     .......IK.J....@
     d85:	82 48 92 44 08 49 95 52 ff ff ff af 50 01 00 44     .H.D.I.R....P..D
     d95:	00 00 00 00 00 00 00 00 00 00 00 ed de 9a 14 95     ................
     da5:	f6 de ac 10 24 00 08 80 24 55 25 11 91 54 2a 95     ....$...$U%..T*.
     db5:	ff ff ff 5f 0b 92 24 00 12 00 00 00 00 00 00 80     ..._..$.........
     dc5:	08 00 00 00 41 20 a9 a8 88 52 25 01 00 00 40 12     ....A ...R%...@.
     dd5:	10 a2 4a 22 22 a9 5a 68 ff ff ff b7 24 08 00 00     ..J"".Zh....$...
     de5:	80 24 89 00 00 00 40 04 00 02 00 48 08 05 02 41     .$....@....H...A
     df5:	24 21 02 02 00 42 00 20 49 54 55 4a 04 42 a5 a5     $!...B. ITUJ.B..
     e05:	ff ff ff 7f a5 41 92 24 00 00 00 24 02 00 04 00     .....A.$...$....
     e15:	00 00 20 00 20 90 00 00 00 04 10 40 00 00 12 09     .. . ......@....
     e25:	a1 6a af 84 48 24 2a 55 ff ff ff af 09 0a 00 00     .j..H$*U........
     e35:	01 00 00 00 20 44 00 00 00 00 01 02 02 00 20 04     .... D........ .
     e45:	00 80 00 00 00 00 80 20 4a d5 5b 11 81 48 55 ea     ....... J.[..HU.
     e55:	ff ff ff df b6 a4 24 11 48 92 24 00 00 00 20 92     ......$.H.$... .
     e65:	20 00 00 00 00 01 00 00 22 00 00 00 20 24 49 52      ......."... $IR
     e75:	55 6a af 4a 08 91 64 55 ff ff ff 7f a5 10 49 42     Uj.J..dU......IB
     e85:	00 00 80 24 89 00 01 00 04 20 00 00 00 00 00 00     ...$..... ......
     e95:	00 08 00 00 04 81 24 cd da fd bf 04 10 44 9a aa     ......$......D..
     ea5:	ff ff ff b7 9b 25 00 88 92 24 09 00 00 24 84 00     .....%...$...$..
     eb5:	00 01 00 40 00 00 00 00 00 00 00 00 40 28 d9 ba     ...@........@(..
     ec5:	ed ff 57 91 42 22 b5 6d ff ff ff ff 56 aa aa 24     ..W.B".m....V..$
     ed5:	08 42 90 44 44 00 10 52 22 08 04 00 20 08 00 00     .B.DD..R"... ...
     ee5:	00 00 00 40 92 d6 b6 77 7f ff ad 12 00 48 52 db     ...@...w.....HR.
     ef5:	ff ff ff ff 6d 55 49 11 21 11 42 12 11 49 21 08     ....mUI.!.B..I!.
     f05:	00 80 20 01 00 80 00 00 00 00 00 12 ad b5 6f db     .. ...........o.
     f15:	ff df 36 49 94 44 aa 52 ff ff ff df db 8a 24 4a     ..6I.D.R......$J
     f25:	4a 24 25 20 00 20 42 21 49 02 00 10 04 00 00 00     J$% . B!I.......
     f35:	00 00 52 c8 54 7b fb fe fe af 92 80 40 90 76 6f     ..R.T{......@.vo
     f45:	ff ff ff 7f b7 6d 55 a5 a4 92 88 92 a4 04 8c 44     .....mU........D
     f55:	04 48 00 00 00 00 08 00 00 40 88 b5 f6 d6 dd 65     .H.......@.....e
     f65:	fb 5b 25 0a 02 22 c9 ac ff ff ff ff db 56 a9 94     .[%..".......V..
     f75:	24 49 52 42 12 52 11 0a 22 01 12 00 80 04 00 00     $IRB.R..".......
     f85:	00 92 52 4a db 5b 5b da ff 95 88 50 48 44 5a 73     ..RJ.[[....PHDZs
     f95:	ff ff ff ff bf ad 96 2a 4b 92 24 29 40 20 52 51     .......*K.$)@ RQ
     fa5:	00 10 80 44 00 40 00 80 48 55 6d 55 52 25 aa a5     ...D.@..HUmUR%..
     fb5:	7f 2b 42 04 81 48 b5 ed ff ff ff 7f db 6d 6b d5     .+B..H.......mk.
     fc5:	54 55 25 45 25 85 24 49 55 42 04 00 12 00 90 2a     TU%E%.$IUB.....*
     fd5:	55 aa 95 88 20 4a 91 c8 ff 42 10 00 08 92 64 db     U... J...B....d.
     fe5:	ff ff ff ff 7f db 54 2b 95 2a 49 92 08 52 95 2a     ......T+.*I..R.*
     ff5:	22 09 21 00 00 09 49 54 a5 b5 2b 01 88 90 24 e5     ".!...IT..+...$.
    1005:	af 14 01 49 52 24 db b6 ff ff ff ff f7 b7 5b 52     ...IR$........[R
    1015:	ab a4 2a 09 52 88 6a 55 12 10 80 54 24 50 a6 d5     ..*.R.jU...T$P..
    1025:	5a 42 12 00 00 02 d2 fe 6d 09 24 20 80 c8 5a fb     ZB......m.$ ..Z.
    1035:	ff ff ff ff af 6e ad ad 48 49 44 a4 80 32 55 a9     .....n..HID..2U.
    1045:	d5 a2 14 80 48 eb 7a 2b 01 08 04 00 00 28 f9 fe     ....H.z+.....(..
    1055:	9b 22 00 01 09 29 b5 6d ff ff ff ff ff 6d 55 92     ."...).m.....mU.
    1065:	92 12 49 12 15 65 db 56 4a 4d a2 2a ab ad dd 4a     ..I..e.VJM.*...J
    1075:	88 80 00 00 40 a0 fe bf 56 44 02 44 50 52 db fe     ....@...VD.DPR..
    1085:	ff ff ff ff ff ad aa 2a 55 a4 24 41 48 88 b6 bb     .......*U.$AH...
    1095:	ad 5a 5b 77 77 5b 6b 05 00 00 00 00 80 46 ff 77     .Z[ww[k......F.w
    10a5:	b5 04 48 10 82 d4 6a db ff ff ff ff df db 55 55     ..H...j.......UU
    10b5:	4a 12 91 24 42 52 ff ff ff f7 fd ee be a5 a4 10     J..$BR..........
    10c5:	01 00 00 80 54 ff ff ad 4b 29 81 80 94 2a dd fd     ....T...K)...*..
    10d5:	ff ff ff ff ff 5e ab 92 24 49 02 12 21 49 fa ff     .....^..$I..!I..
    10e5:	ff bf b7 dd 6d 95 04 01 00 00 00 08 ea ff bf 6d     ....m..........m
    10f5:	95 00 10 4a 28 d5 b6 ff ff ff ff ff ff b7 56 65     ...J(.........Ve
    1105:	49 22 54 80 08 90 d5 fe ff fd df ab b5 4a 48 12     I"T..........JH.
    1115:	00 80 ec f6 ff ff df d6 5a 4a 00 10 41 aa 6d fb     ........ZJ..A.m.
    1125:	ff ff ff ff ff ff 5a 2a 93 44 82 24 80 24 0a b5     ......Z*.D.$.$..
    1135:	ff 6f fb 55 da 89 10 24 49 b2 ff ff ff ff 6b 5b     .o.U...$I.....k[
    1145:	a5 04 49 42 56 55 db ff ff ff ff ff ff 6d ab 55     ..IBVU.......m.U
    1155:	2a 89 10 02 12 42 50 a0 ed ff ff 27 f9 57 a2 ba     *....BP....'.W..
    1165:	d2 fe ff ff ff b7 ad aa 4d 10 80 24 a8 ba fd ff     ........M..$....
    1175:	ff ff ff ff df 6f b7 aa 24 11 49 10 40 90 22 05     .....o..$.I.@.".
    1185:	b4 ff ff df f6 ff ff ff ff ff ff ff bf 6d db b6     .............m..
    1195:	2a 49 12 48 25 e5 b6 ff ff ff ff ff ff bf 6d 55     *I.H%.........mU
    11a5:	4b 2a 02 41 04 08 04 92 90 f4 ff ff ff ff ff ff     K*.A............
    11b5:	ff ff df fe d5 de b6 d5 26 81 a4 92 ca de ef ff     ........&.......
    11c5:	ff ff ff ff ff 76 ab ad b4 52 10 08 82 40 48 00     .....v...R...@H.
    11d5:	49 4a f6 ff ff ff ff ff ff b7 b5 44 6a b3 4a 6d     IJ.........Dj.Jm
    11e5:	95 14 40 24 59 b5 fe ff ff ff ff ff ff ef b6 aa     ..@$Y...........
    11f5:	55 45 23 01 10 82 20 20 80 d4 2a b5 6d ff 7f ff     UE#...  ..*.m...
    1205:	b7 7e c9 bd af 56 b5 5a 49 22 15 49 a5 db fd ff     .~...V.ZI".I....
    1215:	ff ff ff ff ff 7f 5b 55 ab 9a 44 24 01 08 05 09     ......[U..D$....
    1225:	12 92 d6 aa aa 48 d5 c0 aa a0 2e 6b 55 a9 6d ab     .....H.....kU.m.
    1235:	12 49 a2 aa da ee f7 ff ff ff ff ff ff dd b7 5b     .I.............[
    1245:	5a 55 0a 42 88 20 00 00 40 24 a9 6d d5 b5 aa 5f     ZU.B. ..@$.m..._
    1255:	dd df 76 55 a9 aa 4a 6d 25 90 48 54 b5 bd ff ff     ..vU..Jm%.HT....
    1265:	ff ff ff ff ff ff 6e b5 d5 aa b4 10 00 00 28 41     ......n.......(A
    1275:	84 48 52 95 36 ab 5d bb 2b 55 a9 aa 56 55 b5 95     .HR.6.].+U..VU..
    1285:	54 05 95 a5 b6 ed de 7e ff ff ff ff ff ff bd cd     T......~........
    1295:	b6 6d 49 22 49 92 04 04 11 92 ac 6a 6d 55 65 52     .mI"I......jmUeR
    12a5:	b5 aa 56 ab a4 6a db 2a 89 aa 24 59 6d f7 ff ff     ..V..j.*..$Ym...
    12b5:	ff ff ff ff ff df f7 b6 2a 9b 93 84 10 00 40 08     ........*.....@.
    12c5:	00 41 22 d5 d2 da aa 95 64 11 a9 54 2d 95 2a a5     .A".....d..T-.*.
    12d5:	12 50 6a d6 da bf fd ef ff ff ff ff ff ff 6f 6f     .Pj...........oo
    12e5:	75 b5 56 15 82 24 21 a1 24 08 91 94 36 ab 56 aa     u.V..$!.$...6.V.
    12f5:	0a a5 a4 4a 69 6d d5 14 a9 45 c9 aa f7 fa f7 5f     ...Jim...E....._
    1305:	ff ff ff ff ff ff fd dd d7 66 a9 a8 24 00 04 04     .........f..$...
    1315:	49 22 24 29 6d 6d b5 52 a9 54 4a 95 92 d2 96 48     I"$)mm.R.TJ....H
    1325:	44 2a 95 56 bd 6f bf 95 ff ff ff ff ff ff bf bb     D*.V.o..........
    1335:	da ae ad 26 09 49 10 90 90 44 42 52 c9 5a ab 2d     ...&.I...DBR.Z.-
    1345:	55 49 b5 6a 6d 9b 24 a5 12 a4 6a b5 ed fd fd 2a     UI.jm.$...j....*
    1355:	ff ff ff ff ff ff ff ef ad b5 6d 55 92 84 40 22     ..........mU..@"
    1365:	05 89 48 82 94 d2 5a d5 aa 96 aa aa aa 36 49 12     ..H...Z......6I.
    1375:	a9 49 92 ea de ef ab 24 ff ff ff ff ff ff ff 7f     .I.....$........
    1385:	7f db 5a ab 24 20 02 04 32 12 89 94 48 25 d5 aa     ..Z.$ ..2...H%..
    1395:	55 b5 55 55 55 a1 52 92 44 92 d4 d6 7b 3b 57 a5     U.UUU.R.D...{;W.
    13a5:	ff ff ff ff ff ff 7f fb 6b bb 6d 55 a5 05 49 90     ........k.mU..I.
    13b5:	a0 a4 24 29 89 94 24 5b db 6a 6d ab ad 4a 4a 29     ..$)..$[.jm..JJ)
    13c5:	49 52 2d ad ed ff 24 49 ff ff ff ff ff ff ff df     IR-...$I........
    13d5:	df b6 db b6 4a 2a 10 41 4a 49 92 40 12 22 29 a9     ....J*.AJI.@.").
    13e5:	b4 56 ab 5a 12 95 24 45 92 24 d1 7a bf 6d 49 92     .V.Z..$E.$.z.mI.
    13f5:	ff ff ff ff ff ff ff ff fe 6f b7 6b 35 90 02 12     .........o.k5...
    1405:	10 2a 49 96 64 24 91 44 4a a9 54 91 a4 90 94 48     .*I.d$.DJ.T....H
    1415:	92 a4 aa d2 fb 9e 4a 20 ff ff ff ff ff ff ff ff     ......J ........
    1425:	b7 fd 7e dd d6 25 49 88 44 52 92 48 82 92 44 92     ..~..%I.DR.H..D.
    1435:	24 95 92 a4 4a 2a 49 92 24 12 55 bd ed 2b 11 02     $...J*I.$.U..+..
    1445:	00                                                  .

00001446 <__ctors_end>:
    1446:	11 24       	eor	r1, r1
    1448:	1f be       	out	0x3f, r1	; 63
    144a:	cf ef       	ldi	r28, 0xFF	; 255
    144c:	da e0       	ldi	r29, 0x0A	; 10
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	cd bf       	out	0x3d, r28	; 61

00001452 <__do_clear_bss>:
    1452:	21 e0       	ldi	r18, 0x01	; 1
    1454:	a0 e0       	ldi	r26, 0x00	; 0
    1456:	b1 e0       	ldi	r27, 0x01	; 1
    1458:	01 c0       	rjmp	.+2      	; 0x145c <.do_clear_bss_start>

0000145a <.do_clear_bss_loop>:
    145a:	1d 92       	st	X+, r1

0000145c <.do_clear_bss_start>:
    145c:	a2 32       	cpi	r26, 0x22	; 34
    145e:	b2 07       	cpc	r27, r18
    1460:	e1 f7       	brne	.-8      	; 0x145a <.do_clear_bss_loop>
    1462:	d3 d1       	rcall	.+934    	; 0x180a <main>
    1464:	bc c6       	rjmp	.+3448   	; 0x21de <_exit>

00001466 <__bad_interrupt>:
    1466:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000146a <SetupHardware>:

// Configures hardware and peripherals, such as the USB peripherals.
void SetupHardware(void)
{
	// We need to disable watchdog if enabled by bootloader/fuses.
	MCUSR &= ~(1 << WDRF);
    146a:	84 b7       	in	r24, 0x34	; 52
    146c:	87 7f       	andi	r24, 0xF7	; 247
    146e:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	a8 95       	wdr
    1476:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    147a:	88 61       	ori	r24, 0x18	; 24
    147c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1480:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1484:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	80 e8       	ldi	r24, 0x80	; 128
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1492:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1496:	0f be       	out	0x3f, r0	; 63
	DDRB = 0xFF; //uses PORTB. Micro can use either or, but both give us 2 LEDs
	PORTB = 0x0; //The ATmega328P on the UNO will be resetting, so unplug it?
#endif

	// The USB stack should be initialized last.
	USB_Init();
    1498:	1c c4       	rjmp	.+2104   	; 0x1cd2 <USB_Init>

0000149a <EVENT_USB_Device_Connect>:
    149a:	08 95       	ret

0000149c <EVENT_USB_Device_Disconnect>:
    149c:	08 95       	ret

0000149e <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    149e:	42 e3       	ldi	r20, 0x32	; 50
    14a0:	60 ec       	ldi	r22, 0xC0	; 192
    14a2:	82 e0       	ldi	r24, 0x02	; 2
    14a4:	4f d3       	rcall	.+1694   	; 0x1b44 <Endpoint_ConfigureEndpoint_Prv>
    14a6:	42 e3       	ldi	r20, 0x32	; 50
    14a8:	61 ec       	ldi	r22, 0xC1	; 193
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	4b c3       	rjmp	.+1686   	; 0x1b44 <Endpoint_ConfigureEndpoint_Prv>

000014ae <EVENT_USB_Device_ControlRequest>:
	// We can read ConfigSuccess to indicate a success or failure at this point.
}

// Process control requests sent to the device from the USB host.
void EVENT_USB_Device_ControlRequest(void)
{
    14ae:	08 95       	ret

000014b0 <complete_zig_zag_pattern>:
#define max(a, b) (a > b ? a : b)
#define ms_2_count(ms) (ms / ECHOES / (max(POLLING_MS, 8) / 8 * 8))
#define is_black(x, y) (pgm_read_byte(&(image_data[((x) / 8) + ((y) * 40)])) & 1 << ((x) % 8))

void complete_zig_zag_pattern(USB_JoystickReport_Input_t *const ReportData)
{
    14b0:	fc 01       	movw	r30, r24
	// to avoid the acceleration triggered by two consecutive moves done in the same
	// direction. This pattern pass on the same pixel 3 times (N-2, N and N+1), but
	// is the easiest to check that I found.
	uint8_t move_direction;

	if (ypos % 4 < 2)
    14b2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ypos>
    14b6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ypos+0x1>
    14ba:	64 e0       	ldi	r22, 0x04	; 4
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	68 d6       	rcall	.+3280   	; 0x2190 <__divmodhi4>
    14c0:	02 97       	sbiw	r24, 0x02	; 2
    14c2:	14 f0       	brlt	.+4      	; 0x14c8 <complete_zig_zag_pattern+0x18>
		move_direction = HAT_RIGHT;
	else
		move_direction = HAT_LEFT;
    14c4:	46 e0       	ldi	r20, 0x06	; 6
    14c6:	01 c0       	rjmp	.+2      	; 0x14ca <complete_zig_zag_pattern+0x1a>
	// direction. This pattern pass on the same pixel 3 times (N-2, N and N+1), but
	// is the easiest to check that I found.
	uint8_t move_direction;

	if (ypos % 4 < 2)
		move_direction = HAT_RIGHT;
    14c8:	42 e0       	ldi	r20, 0x02	; 2
	else
		move_direction = HAT_LEFT;

	if (command_count < 642)
    14ca:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <command_count>
    14ce:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <command_count+0x1>
    14d2:	22 38       	cpi	r18, 0x82	; 130
    14d4:	82 e0       	ldi	r24, 0x02	; 2
    14d6:	38 07       	cpc	r19, r24
    14d8:	44 f5       	brge	.+80     	; 0x152a <complete_zig_zag_pattern+0x7a>
	{
		if (command_count % 2 == 1)
    14da:	c9 01       	movw	r24, r18
    14dc:	62 e0       	ldi	r22, 0x02	; 2
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	57 d6       	rcall	.+3246   	; 0x2190 <__divmodhi4>
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	11 f4       	brne	.+4      	; 0x14ea <complete_zig_zag_pattern+0x3a>
			ReportData->HAT = move_direction;
    14e6:	42 83       	std	Z+2, r20	; 0x02
    14e8:	09 c0       	rjmp	.+18     	; 0x14fc <complete_zig_zag_pattern+0x4c>
		else if (command_count % 4 == 0)
    14ea:	c9 01       	movw	r24, r18
    14ec:	83 70       	andi	r24, 0x03	; 3
    14ee:	99 27       	eor	r25, r25
    14f0:	89 2b       	or	r24, r25
    14f2:	19 f4       	brne	.+6      	; 0x14fa <complete_zig_zag_pattern+0x4a>
			ReportData->HAT = HAT_BOTTOM;
    14f4:	84 e0       	ldi	r24, 0x04	; 4
    14f6:	82 83       	std	Z+2, r24	; 0x02
    14f8:	01 c0       	rjmp	.+2      	; 0x14fc <complete_zig_zag_pattern+0x4c>
		else
			ReportData->HAT = HAT_TOP;
    14fa:	12 82       	std	Z+2, r1	; 0x02
		if (command_count == 640)
    14fc:	20 38       	cpi	r18, 0x80	; 128
    14fe:	82 e0       	ldi	r24, 0x02	; 2
    1500:	38 07       	cpc	r19, r24
    1502:	11 f4       	brne	.+4      	; 0x1508 <complete_zig_zag_pattern+0x58>
			ReportData->HAT = HAT_CENTER;
    1504:	88 e0       	ldi	r24, 0x08	; 8
    1506:	09 c0       	rjmp	.+18     	; 0x151a <complete_zig_zag_pattern+0x6a>
		else if (command_count == 639 || command_count == 641)
    1508:	2f 37       	cpi	r18, 0x7F	; 127
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	38 07       	cpc	r19, r24
    150e:	21 f0       	breq	.+8      	; 0x1518 <complete_zig_zag_pattern+0x68>
    1510:	21 38       	cpi	r18, 0x81	; 129
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	38 07       	cpc	r19, r24
    1516:	11 f4       	brne	.+4      	; 0x151c <complete_zig_zag_pattern+0x6c>
			ReportData->HAT = HAT_BOTTOM;
    1518:	84 e0       	ldi	r24, 0x04	; 4
    151a:	82 83       	std	Z+2, r24	; 0x02
		command_count++;
    151c:	2f 5f       	subi	r18, 0xFF	; 255
    151e:	3f 4f       	sbci	r19, 0xFF	; 255
    1520:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <command_count+0x1>
    1524:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <command_count>
		return;
    1528:	08 95       	ret
	}

	command_count = 0;
    152a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <command_count+0x1>
    152e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <command_count>
    1532:	08 95       	ret

00001534 <GetNextReport>:
	return;
}

// Prepare the next report for the host
void GetNextReport(USB_JoystickReport_Input_t *const ReportData)
{
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	dc 01       	movw	r26, r24

	// Prepare an empty report
	memset(ReportData, 0, sizeof(USB_JoystickReport_Input_t));
    153a:	98 e0       	ldi	r25, 0x08	; 8
    153c:	fd 01       	movw	r30, r26
    153e:	39 2f       	mov	r19, r25
    1540:	11 92       	st	Z+, r1
    1542:	3a 95       	dec	r19
    1544:	e9 f7       	brne	.-6      	; 0x1540 <GetNextReport+0xc>
	ReportData->LX = STICK_CENTER;
    1546:	80 e8       	ldi	r24, 0x80	; 128
    1548:	13 96       	adiw	r26, 0x03	; 3
    154a:	8c 93       	st	X, r24
    154c:	13 97       	sbiw	r26, 0x03	; 3
	ReportData->LY = STICK_CENTER;
    154e:	14 96       	adiw	r26, 0x04	; 4
    1550:	8c 93       	st	X, r24
    1552:	14 97       	sbiw	r26, 0x04	; 4
	ReportData->RX = STICK_CENTER;
    1554:	15 96       	adiw	r26, 0x05	; 5
    1556:	8c 93       	st	X, r24
    1558:	15 97       	sbiw	r26, 0x05	; 5
	ReportData->RY = STICK_CENTER;
    155a:	16 96       	adiw	r26, 0x06	; 6
    155c:	8c 93       	st	X, r24
    155e:	16 97       	sbiw	r26, 0x06	; 6
	ReportData->HAT = HAT_CENTER;
    1560:	12 96       	adiw	r26, 0x02	; 2
    1562:	9c 93       	st	X, r25
    1564:	12 97       	sbiw	r26, 0x02	; 2
			report_count = 0;
	}
#endif

	// Repeat ECHOES times the last report
	if (echoes > 0)
    1566:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <echoes>
    156a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <echoes+0x1>
    156e:	18 16       	cp	r1, r24
    1570:	19 06       	cpc	r1, r25
    1572:	6c f4       	brge	.+26     	; 0x158e <GetNextReport+0x5a>
	{
		memcpy(ReportData, &last_report, sizeof(USB_JoystickReport_Input_t));
    1574:	88 e0       	ldi	r24, 0x08	; 8
    1576:	ed e0       	ldi	r30, 0x0D	; 13
    1578:	f1 e0       	ldi	r31, 0x01	; 1
    157a:	01 90       	ld	r0, Z+
    157c:	0d 92       	st	X+, r0
    157e:	8a 95       	dec	r24
    1580:	e1 f7       	brne	.-8      	; 0x157a <GetNextReport+0x46>
		echoes--;
    1582:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <echoes>
    1586:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <echoes+0x1>
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	f3 c0       	rjmp	.+486    	; 0x1774 <GetNextReport+0x240>
    158e:	ed 01       	movw	r28, r26
		return;
	}

	// States and moves management
	switch (state)
    1590:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <state>
    1594:	82 30       	cpi	r24, 0x02	; 2
    1596:	09 f4       	brne	.+2      	; 0x159a <GetNextReport+0x66>
    1598:	58 c0       	rjmp	.+176    	; 0x164a <GetNextReport+0x116>
    159a:	28 f4       	brcc	.+10     	; 0x15a6 <GetNextReport+0x72>
    159c:	88 23       	and	r24, r24
    159e:	61 f0       	breq	.+24     	; 0x15b8 <GetNextReport+0x84>
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	29 f1       	breq	.+74     	; 0x15ee <GetNextReport+0xba>
    15a4:	88 c0       	rjmp	.+272    	; 0x16b6 <GetNextReport+0x182>
    15a6:	84 30       	cpi	r24, 0x04	; 4
    15a8:	09 f4       	brne	.+2      	; 0x15ac <GetNextReport+0x78>
    15aa:	7a c0       	rjmp	.+244    	; 0x16a0 <GetNextReport+0x16c>
    15ac:	08 f4       	brcc	.+2      	; 0x15b0 <GetNextReport+0x7c>
    15ae:	58 c0       	rjmp	.+176    	; 0x1660 <GetNextReport+0x12c>
    15b0:	85 30       	cpi	r24, 0x05	; 5
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <GetNextReport+0x82>
    15b4:	e3 c0       	rjmp	.+454    	; 0x177c <GetNextReport+0x248>
    15b6:	7f c0       	rjmp	.+254    	; 0x16b6 <GetNextReport+0x182>
	{
	case SYNC_CONTROLLER:
		if (command_count > ms_2_count(2000))
    15b8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <command_count>
    15bc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <command_count+0x1>
    15c0:	8f 33       	cpi	r24, 0x3F	; 63
    15c2:	91 05       	cpc	r25, r1
    15c4:	34 f0       	brlt	.+12     	; 0x15d2 <GetNextReport+0x9e>
		{
			command_count = 0;
    15c6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <command_count+0x1>
    15ca:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <command_count>
			state = SYNC_POSITION;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	22 c0       	rjmp	.+68     	; 0x1616 <GetNextReport+0xe2>
		}
		else
		{
			if (command_count == ms_2_count(500) || command_count == ms_2_count(1000))
    15d2:	8f 7e       	andi	r24, 0xEF	; 239
    15d4:	8f 30       	cpi	r24, 0x0F	; 15
    15d6:	91 05       	cpc	r25, r1
    15d8:	21 f4       	brne	.+8      	; 0x15e2 <GetNextReport+0xae>
				ReportData->Button |= SWITCH_L | SWITCH_R;
    15da:	88 81       	ld	r24, Y
    15dc:	99 81       	ldd	r25, Y+1	; 0x01
    15de:	80 63       	ori	r24, 0x30	; 48
    15e0:	28 c0       	rjmp	.+80     	; 0x1632 <GetNextReport+0xfe>
			else if (command_count == ms_2_count(1500) || command_count == ms_2_count(2000))
    15e2:	8e 97       	sbiw	r24, 0x2e	; 46
    15e4:	41 f5       	brne	.+80     	; 0x1636 <GetNextReport+0x102>
				ReportData->Button |= SWITCH_A;
    15e6:	88 81       	ld	r24, Y
    15e8:	99 81       	ldd	r25, Y+1	; 0x01
    15ea:	84 60       	ori	r24, 0x04	; 4
    15ec:	22 c0       	rjmp	.+68     	; 0x1632 <GetNextReport+0xfe>
			command_count++;
		}
		break;
	case SYNC_POSITION:
		if (command_count > ms_2_count(4000))
    15ee:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <command_count>
    15f2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <command_count+0x1>
    15f6:	8e 37       	cpi	r24, 0x7E	; 126
    15f8:	91 05       	cpc	r25, r1
    15fa:	84 f0       	brlt	.+32     	; 0x161c <GetNextReport+0xe8>
		{
			command_count = 0;
    15fc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <command_count+0x1>
    1600:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <command_count>
			xpos = 0;
    1604:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <xpos+0x1>
    1608:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <xpos>
			ypos = 0;
    160c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <ypos+0x1>
    1610:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ypos>
#if defined(ZIG_ZAG_PRINTING)
			state = ZIG_ZAG;
    1614:	82 e0       	ldi	r24, 0x02	; 2
    1616:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
    161a:	4d c0       	rjmp	.+154    	; 0x16b6 <GetNextReport+0x182>
#endif
		}
		else
		{
			// Moving faster with LX/LY
			ReportData->LX = STICK_MIN;
    161c:	1b 82       	std	Y+3, r1	; 0x03
			ReportData->LY = STICK_MIN;
    161e:	1c 82       	std	Y+4, r1	; 0x04
			// Clear the screen
			if (command_count == ms_2_count(1500) || command_count == ms_2_count(3000))
    1620:	8e 32       	cpi	r24, 0x2E	; 46
    1622:	91 05       	cpc	r25, r1
    1624:	19 f0       	breq	.+6      	; 0x162c <GetNextReport+0xf8>
    1626:	8d 35       	cpi	r24, 0x5D	; 93
    1628:	91 05       	cpc	r25, r1
    162a:	29 f4       	brne	.+10     	; 0x1636 <GetNextReport+0x102>
				ReportData->Button |= SWITCH_MINUS;
    162c:	88 81       	ld	r24, Y
    162e:	99 81       	ldd	r25, Y+1	; 0x01
    1630:	91 60       	ori	r25, 0x01	; 1
    1632:	99 83       	std	Y+1, r25	; 0x01
    1634:	88 83       	st	Y, r24
			command_count++;
    1636:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <command_count>
    163a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <command_count+0x1>
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <command_count+0x1>
    1644:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <command_count>
    1648:	36 c0       	rjmp	.+108    	; 0x16b6 <GetNextReport+0x182>
		}
		break;
	case ZIG_ZAG:
		complete_zig_zag_pattern(ReportData);
    164a:	cd 01       	movw	r24, r26
    164c:	31 df       	rcall	.-414    	; 0x14b0 <complete_zig_zag_pattern>
		if (ypos > 119)
    164e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ypos>
    1652:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ypos+0x1>
    1656:	88 37       	cpi	r24, 0x78	; 120
    1658:	91 05       	cpc	r25, r1
    165a:	6c f1       	brlt	.+90     	; 0x16b6 <GetNextReport+0x182>
			state = DONE;
    165c:	85 e0       	ldi	r24, 0x05	; 5
    165e:	db cf       	rjmp	.-74     	; 0x1616 <GetNextReport+0xe2>
		break;
	case MOVE:
		if ((xpos == 0 && ypos % 2 == 1) || (xpos == 319 && ypos % 2 == 0))
    1660:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <xpos>
    1664:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <xpos+0x1>
    1668:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ypos>
    166c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <ypos+0x1>
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	39 f4       	brne	.+14     	; 0x1682 <GetNextReport+0x14e>
    1674:	c9 01       	movw	r24, r18
    1676:	62 e0       	ldi	r22, 0x02	; 2
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	8a d5       	rcall	.+2836   	; 0x2190 <__divmodhi4>
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	41 f4       	brne	.+16     	; 0x1690 <GetNextReport+0x15c>
    1680:	05 c0       	rjmp	.+10     	; 0x168c <GetNextReport+0x158>
    1682:	8f 33       	cpi	r24, 0x3F	; 63
    1684:	91 40       	sbci	r25, 0x01	; 1
    1686:	21 f4       	brne	.+8      	; 0x1690 <GetNextReport+0x15c>
    1688:	20 fd       	sbrc	r18, 0
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <GetNextReport+0x15c>
			ReportData->HAT = HAT_BOTTOM;
    168c:	84 e0       	ldi	r24, 0x04	; 4
    168e:	05 c0       	rjmp	.+10     	; 0x169a <GetNextReport+0x166>
		else if (ypos % 2 == 0)
    1690:	20 fd       	sbrc	r18, 0
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <GetNextReport+0x164>
			ReportData->HAT = HAT_RIGHT;
    1694:	82 e0       	ldi	r24, 0x02	; 2
    1696:	01 c0       	rjmp	.+2      	; 0x169a <GetNextReport+0x166>
		else
			ReportData->HAT = HAT_LEFT;
    1698:	86 e0       	ldi	r24, 0x06	; 6
    169a:	8a 83       	std	Y+2, r24	; 0x02
		state = STOP;
    169c:	84 e0       	ldi	r24, 0x04	; 4
    169e:	bb cf       	rjmp	.-138    	; 0x1616 <GetNextReport+0xe2>
		break;
	case STOP:
		state = MOVE;
    16a0:	83 e0       	ldi	r24, 0x03	; 3
    16a2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
		if (ypos > 119)
    16a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ypos>
    16aa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ypos+0x1>
    16ae:	88 37       	cpi	r24, 0x78	; 120
    16b0:	91 05       	cpc	r25, r1
    16b2:	a4 f6       	brge	.-88     	; 0x165c <GetNextReport+0x128>
    16b4:	08 c0       	rjmp	.+16     	; 0x16c6 <GetNextReport+0x192>
		_delay_ms(250);
#endif
		return;
	}

	if (state != SYNC_CONTROLLER && state != SYNC_POSITION && state != DONE)
    16b6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <state>
    16ba:	82 30       	cpi	r24, 0x02	; 2
    16bc:	08 f4       	brcc	.+2      	; 0x16c0 <GetNextReport+0x18c>
    16be:	50 c0       	rjmp	.+160    	; 0x1760 <GetNextReport+0x22c>
    16c0:	85 30       	cpi	r24, 0x05	; 5
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <GetNextReport+0x192>
    16c4:	4d c0       	rjmp	.+154    	; 0x1760 <GetNextReport+0x22c>
	{
		// Position update (diagonal moves doesn't work since they ink two dots... is not necessary to test them)
		if (ReportData->HAT == HAT_RIGHT)
    16c6:	2a 81       	ldd	r18, Y+2	; 0x02
    16c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <xpos>
    16cc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <xpos+0x1>
    16d0:	22 30       	cpi	r18, 0x02	; 2
    16d2:	11 f4       	brne	.+4      	; 0x16d8 <GetNextReport+0x1a4>
			xpos++;
    16d4:	01 96       	adiw	r24, 0x01	; 1
    16d6:	03 c0       	rjmp	.+6      	; 0x16de <GetNextReport+0x1aa>
		else if (ReportData->HAT == HAT_LEFT)
    16d8:	26 30       	cpi	r18, 0x06	; 6
    16da:	31 f4       	brne	.+12     	; 0x16e8 <GetNextReport+0x1b4>
			xpos--;
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <xpos+0x1>
    16e2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <xpos>
    16e6:	0f c0       	rjmp	.+30     	; 0x1706 <GetNextReport+0x1d2>
    16e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ypos>
    16ec:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ypos+0x1>
		else if (ReportData->HAT == HAT_TOP)
    16f0:	21 11       	cpse	r18, r1
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <GetNextReport+0x1c4>
			ypos--;
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	03 c0       	rjmp	.+6      	; 0x16fe <GetNextReport+0x1ca>
		else if (ReportData->HAT == HAT_BOTTOM)
    16f8:	24 30       	cpi	r18, 0x04	; 4
    16fa:	29 f4       	brne	.+10     	; 0x1706 <GetNextReport+0x1d2>
			ypos++;
    16fc:	01 96       	adiw	r24, 0x01	; 1
    16fe:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ypos+0x1>
    1702:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ypos>

		// Inking (the printing patterns above will not move outside the canvas... is not necessary to test them)
		if (is_black(xpos, ypos))
    1706:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <xpos>
    170a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <xpos+0x1>
    170e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ypos>
    1712:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <ypos+0x1>
    1716:	48 e2       	ldi	r20, 0x28	; 40
    1718:	42 9f       	mul	r20, r18
    171a:	f0 01       	movw	r30, r0
    171c:	43 9f       	mul	r20, r19
    171e:	f0 0d       	add	r31, r0
    1720:	11 24       	eor	r1, r1
    1722:	9c 01       	movw	r18, r24
    1724:	97 ff       	sbrs	r25, 7
    1726:	02 c0       	rjmp	.+4      	; 0x172c <GetNextReport+0x1f8>
    1728:	29 5f       	subi	r18, 0xF9	; 249
    172a:	3f 4f       	sbci	r19, 0xFF	; 255
    172c:	43 e0       	ldi	r20, 0x03	; 3
    172e:	35 95       	asr	r19
    1730:	27 95       	ror	r18
    1732:	4a 95       	dec	r20
    1734:	e1 f7       	brne	.-8      	; 0x172e <GetNextReport+0x1fa>
    1736:	e2 0f       	add	r30, r18
    1738:	f3 1f       	adc	r31, r19
    173a:	eb 57       	subi	r30, 0x7B	; 123
    173c:	fe 4f       	sbci	r31, 0xFE	; 254
    173e:	e4 91       	lpm	r30, Z
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	68 e0       	ldi	r22, 0x08	; 8
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	24 d5       	rcall	.+2632   	; 0x2190 <__divmodhi4>
    1748:	02 c0       	rjmp	.+4      	; 0x174e <GetNextReport+0x21a>
    174a:	f5 95       	asr	r31
    174c:	e7 95       	ror	r30
    174e:	8a 95       	dec	r24
    1750:	e2 f7       	brpl	.-8      	; 0x174a <GetNextReport+0x216>
    1752:	e0 ff       	sbrs	r30, 0
    1754:	05 c0       	rjmp	.+10     	; 0x1760 <GetNextReport+0x22c>
			ReportData->Button |= SWITCH_A;
    1756:	88 81       	ld	r24, Y
    1758:	99 81       	ldd	r25, Y+1	; 0x01
    175a:	84 60       	ori	r24, 0x04	; 4
    175c:	99 83       	std	Y+1, r25	; 0x01
    175e:	88 83       	st	Y, r24
	}

	// Prepare to echo this report
	memcpy(&last_report, ReportData, sizeof(USB_JoystickReport_Input_t));
    1760:	88 e0       	ldi	r24, 0x08	; 8
    1762:	fe 01       	movw	r30, r28
    1764:	ad e0       	ldi	r26, 0x0D	; 13
    1766:	b1 e0       	ldi	r27, 0x01	; 1
    1768:	01 90       	ld	r0, Z+
    176a:	0d 92       	st	X+, r0
    176c:	8a 95       	dec	r24
    176e:	e1 f7       	brne	.-8      	; 0x1768 <GetNextReport+0x234>
	echoes = ECHOES;
    1770:	84 e0       	ldi	r24, 0x04	; 4
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <echoes+0x1>
    1778:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <echoes>
}
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	08 95       	ret

00001782 <HID_Task>:
	// Not used here, it looks like we don't receive control request from the Switch.
}

// Process and deliver data from IN and OUT endpoints.
void HID_Task(void)
{
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	28 97       	sbiw	r28, 0x08	; 8
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	cd bf       	out	0x3d, r28	; 61
	// If the device isn't connected and properly configured, we can't do anything here.
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1796:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_DeviceState>
    179a:	84 30       	cpi	r24, 0x04	; 4
    179c:	69 f5       	brne	.+90     	; 0x17f8 <HID_Task+0x76>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    179e:	82 e0       	ldi	r24, 0x02	; 2
    17a0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		return;

	// We'll start with the OUT endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_OUT_EPADDR);
	// We'll check to see if we received something on the OUT endpoint.
	if (Endpoint_IsOUTReceived())
    17a8:	82 ff       	sbrs	r24, 2
    17aa:	10 c0       	rjmp	.+32     	; 0x17cc <HID_Task+0x4a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    17ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		// If we did, and the packet has data, we'll react to it.
		if (Endpoint_IsReadWriteAllowed())
    17b0:	85 ff       	sbrs	r24, 5
    17b2:	07 c0       	rjmp	.+14     	; 0x17c2 <HID_Task+0x40>
		{
			// We'll create a place to store our data received from the host.
			USB_JoystickReport_Output_t JoystickOutputData;
			// We'll then take in that data, setting it up in our storage.
			Endpoint_Read_Stream_LE(&JoystickOutputData, sizeof(JoystickOutputData), NULL);
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	67 e0       	ldi	r22, 0x07	; 7
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	ce 01       	movw	r24, r28
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	b4 d0       	rcall	.+360    	; 0x192a <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    17c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17c6:	8b 77       	andi	r24, 0x7B	; 123
    17c8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	}

	// We'll then move on to the IN endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_IN_EPADDR);
	// We first check to see if the host is ready to accept data.
	if (Endpoint_IsINReady())
    17d6:	80 ff       	sbrs	r24, 0
    17d8:	0f c0       	rjmp	.+30     	; 0x17f8 <HID_Task+0x76>
	{
		// We'll create an empty report.
		USB_JoystickReport_Input_t JoystickInputData;
		// We'll then populate this report with what we want to send to the host.
		GetNextReport(&JoystickInputData);
    17da:	ce 01       	movw	r24, r28
    17dc:	01 96       	adiw	r24, 0x01	; 1
    17de:	aa de       	rcall	.-684    	; 0x1534 <GetNextReport>
		// Once populated, we can output this data to the host. We do this by first writing the data to the control stream.
		Endpoint_Write_Stream_LE(&JoystickInputData, sizeof(JoystickInputData), NULL);
    17e0:	40 e0       	ldi	r20, 0x00	; 0
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	68 e0       	ldi	r22, 0x08	; 8
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	ce 01       	movw	r24, r28
    17ea:	01 96       	adiw	r24, 0x01	; 1
    17ec:	54 d0       	rcall	.+168    	; 0x1896 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17f2:	8e 77       	andi	r24, 0x7E	; 126
    17f4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		// We then send an IN packet on this endpoint.
		Endpoint_ClearIN();
	}
}
    17f8:	28 96       	adiw	r28, 0x08	; 8
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	08 95       	ret

0000180a <main>:

// Main entry point.
int main(void)
{
	// We'll start by performing hardware and peripheral setup.
	SetupHardware();
    180a:	2f de       	rcall	.-930    	; 0x146a <SetupHardware>
	GlobalInterruptEnable();
	// Once that's done, we'll enter an infinite loop.
	for (;;)
	{
		// We need to run our task to process and deliver data for our IN and OUT endpoints.
		HID_Task();
    180c:	78 94       	sei
		// We also need to run the main USB management task.
		USB_USBTask();
    180e:	b9 df       	rcall	.-142    	; 0x1782 <HID_Task>
    1810:	a5 d4       	rcall	.+2378   	; 0x215c <USB_USBTask>
    1812:	fd cf       	rjmp	.-6      	; 0x180e <main+0x4>

00001814 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    1814:	29 2f       	mov	r18, r25
    1816:	33 27       	eor	r19, r19
    1818:	23 30       	cpi	r18, 0x03	; 3
    181a:	31 05       	cpc	r19, r1
    181c:	e1 f0       	breq	.+56     	; 0x1856 <CALLBACK_USB_GetDescriptor+0x42>
    181e:	58 f4       	brcc	.+22     	; 0x1836 <CALLBACK_USB_GetDescriptor+0x22>
    1820:	21 30       	cpi	r18, 0x01	; 1
    1822:	31 05       	cpc	r19, r1
    1824:	99 f0       	breq	.+38     	; 0x184c <CALLBACK_USB_GetDescriptor+0x38>
    1826:	22 30       	cpi	r18, 0x02	; 2
    1828:	31 05       	cpc	r19, r1
    182a:	69 f5       	brne	.+90     	; 0x1886 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    182c:	89 e2       	ldi	r24, 0x29	; 41
    182e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    1830:	24 ef       	ldi	r18, 0xF4	; 244
    1832:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    1834:	2c c0       	rjmp	.+88     	; 0x188e <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    1836:	21 32       	cpi	r18, 0x21	; 33
    1838:	31 05       	cpc	r19, r1
    183a:	01 f1       	breq	.+64     	; 0x187c <CALLBACK_USB_GetDescriptor+0x68>
    183c:	22 32       	cpi	r18, 0x22	; 34
    183e:	31 05       	cpc	r19, r1
    1840:	11 f5       	brne	.+68     	; 0x1886 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
    1842:	86 e5       	ldi	r24, 0x56	; 86
    1844:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
    1846:	2f e2       	ldi	r18, 0x2F	; 47
    1848:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(JoystickReport);
			break;
    184a:	21 c0       	rjmp	.+66     	; 0x188e <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    184c:	82 e1       	ldi	r24, 0x12	; 18
    184e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    1850:	2d e1       	ldi	r18, 0x1D	; 29
    1852:	31 e0       	ldi	r19, 0x01	; 1
    1854:	1c c0       	rjmp	.+56     	; 0x188e <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
    1856:	99 27       	eor	r25, r25
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	91 05       	cpc	r25, r1
    185c:	49 f0       	breq	.+18     	; 0x1870 <CALLBACK_USB_GetDescriptor+0x5c>
    185e:	28 f0       	brcs	.+10     	; 0x186a <CALLBACK_USB_GetDescriptor+0x56>
    1860:	02 97       	sbiw	r24, 0x02	; 2
    1862:	89 f4       	brne	.+34     	; 0x1886 <CALLBACK_USB_GetDescriptor+0x72>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    1864:	ec ea       	ldi	r30, 0xAC	; 172
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	05 c0       	rjmp	.+10     	; 0x1874 <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    186a:	e0 ef       	ldi	r30, 0xF0	; 240
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1870:	e2 ed       	ldi	r30, 0xD2	; 210
    1872:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    1874:	84 91       	lpm	r24, Z
    1876:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    1878:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    187a:	09 c0       	rjmp	.+18     	; 0x188e <CALLBACK_USB_GetDescriptor+0x7a>
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
    187c:	89 e0       	ldi	r24, 0x09	; 9
    187e:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
    1880:	26 e0       	ldi	r18, 0x06	; 6
    1882:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
    1884:	04 c0       	rjmp	.+8      	; 0x188e <CALLBACK_USB_GetDescriptor+0x7a>
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
	const void** const DescriptorAddress
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
    188e:	fa 01       	movw	r30, r20
    1890:	31 83       	std	Z+1, r19	; 0x01
    1892:	20 83       	st	Z, r18
	return Size;
}
    1894:	08 95       	ret

00001896 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1896:	cf 92       	push	r12
    1898:	df 92       	push	r13
    189a:	ef 92       	push	r14
    189c:	ff 92       	push	r15
    189e:	0f 93       	push	r16
    18a0:	1f 93       	push	r17
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	ec 01       	movw	r28, r24
    18a8:	8b 01       	movw	r16, r22
    18aa:	7a 01       	movw	r14, r20
    18ac:	9f d1       	rcall	.+830    	; 0x1bec <Endpoint_WaitUntilReady>
    18ae:	81 11       	cpse	r24, r1
    18b0:	33 c0       	rjmp	.+102    	; 0x1918 <Endpoint_Write_Stream_LE+0x82>
    18b2:	e1 14       	cp	r14, r1
    18b4:	f1 04       	cpc	r15, r1
    18b6:	39 f0       	breq	.+14     	; 0x18c6 <Endpoint_Write_Stream_LE+0x30>
    18b8:	f7 01       	movw	r30, r14
    18ba:	80 81       	ld	r24, Z
    18bc:	91 81       	ldd	r25, Z+1	; 0x01
    18be:	08 1b       	sub	r16, r24
    18c0:	19 0b       	sbc	r17, r25
    18c2:	c8 0f       	add	r28, r24
    18c4:	d9 1f       	adc	r29, r25
    18c6:	c1 2c       	mov	r12, r1
    18c8:	d1 2c       	mov	r13, r1
    18ca:	01 15       	cp	r16, r1
    18cc:	11 05       	cpc	r17, r1
    18ce:	19 f1       	breq	.+70     	; 0x1916 <Endpoint_Write_Stream_LE+0x80>
    18d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18d4:	85 fd       	sbrc	r24, 5
    18d6:	16 c0       	rjmp	.+44     	; 0x1904 <Endpoint_Write_Stream_LE+0x6e>
    18d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18dc:	8e 77       	andi	r24, 0x7E	; 126
    18de:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18e2:	3c d4       	rcall	.+2168   	; 0x215c <USB_USBTask>
    18e4:	e1 14       	cp	r14, r1
    18e6:	f1 04       	cpc	r15, r1
    18e8:	49 f0       	breq	.+18     	; 0x18fc <Endpoint_Write_Stream_LE+0x66>
    18ea:	f7 01       	movw	r30, r14
    18ec:	80 81       	ld	r24, Z
    18ee:	91 81       	ldd	r25, Z+1	; 0x01
    18f0:	c8 0e       	add	r12, r24
    18f2:	d9 1e       	adc	r13, r25
    18f4:	d1 82       	std	Z+1, r13	; 0x01
    18f6:	c0 82       	st	Z, r12
    18f8:	85 e0       	ldi	r24, 0x05	; 5
    18fa:	0e c0       	rjmp	.+28     	; 0x1918 <Endpoint_Write_Stream_LE+0x82>
    18fc:	77 d1       	rcall	.+750    	; 0x1bec <Endpoint_WaitUntilReady>
    18fe:	88 23       	and	r24, r24
    1900:	21 f3       	breq	.-56     	; 0x18ca <Endpoint_Write_Stream_LE+0x34>
    1902:	0a c0       	rjmp	.+20     	; 0x1918 <Endpoint_Write_Stream_LE+0x82>
    1904:	89 91       	ld	r24, Y+
    1906:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    190a:	01 50       	subi	r16, 0x01	; 1
    190c:	11 09       	sbc	r17, r1
    190e:	ff ef       	ldi	r31, 0xFF	; 255
    1910:	cf 1a       	sub	r12, r31
    1912:	df 0a       	sbc	r13, r31
    1914:	da cf       	rjmp	.-76     	; 0x18ca <Endpoint_Write_Stream_LE+0x34>
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	1f 91       	pop	r17
    191e:	0f 91       	pop	r16
    1920:	ff 90       	pop	r15
    1922:	ef 90       	pop	r14
    1924:	df 90       	pop	r13
    1926:	cf 90       	pop	r12
    1928:	08 95       	ret

0000192a <Endpoint_Read_Stream_LE>:
    192a:	cf 92       	push	r12
    192c:	df 92       	push	r13
    192e:	ef 92       	push	r14
    1930:	ff 92       	push	r15
    1932:	0f 93       	push	r16
    1934:	1f 93       	push	r17
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	ec 01       	movw	r28, r24
    193c:	8b 01       	movw	r16, r22
    193e:	7a 01       	movw	r14, r20
    1940:	55 d1       	rcall	.+682    	; 0x1bec <Endpoint_WaitUntilReady>
    1942:	81 11       	cpse	r24, r1
    1944:	33 c0       	rjmp	.+102    	; 0x19ac <Endpoint_Read_Stream_LE+0x82>
    1946:	e1 14       	cp	r14, r1
    1948:	f1 04       	cpc	r15, r1
    194a:	39 f0       	breq	.+14     	; 0x195a <Endpoint_Read_Stream_LE+0x30>
    194c:	f7 01       	movw	r30, r14
    194e:	80 81       	ld	r24, Z
    1950:	91 81       	ldd	r25, Z+1	; 0x01
    1952:	08 1b       	sub	r16, r24
    1954:	19 0b       	sbc	r17, r25
    1956:	c8 0f       	add	r28, r24
    1958:	d9 1f       	adc	r29, r25
    195a:	c1 2c       	mov	r12, r1
    195c:	d1 2c       	mov	r13, r1
    195e:	01 15       	cp	r16, r1
    1960:	11 05       	cpc	r17, r1
    1962:	19 f1       	breq	.+70     	; 0x19aa <Endpoint_Read_Stream_LE+0x80>
    1964:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1968:	85 fd       	sbrc	r24, 5
    196a:	16 c0       	rjmp	.+44     	; 0x1998 <Endpoint_Read_Stream_LE+0x6e>
    196c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1970:	8b 77       	andi	r24, 0x7B	; 123
    1972:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1976:	f2 d3       	rcall	.+2020   	; 0x215c <USB_USBTask>
    1978:	e1 14       	cp	r14, r1
    197a:	f1 04       	cpc	r15, r1
    197c:	49 f0       	breq	.+18     	; 0x1990 <Endpoint_Read_Stream_LE+0x66>
    197e:	f7 01       	movw	r30, r14
    1980:	80 81       	ld	r24, Z
    1982:	91 81       	ldd	r25, Z+1	; 0x01
    1984:	c8 0e       	add	r12, r24
    1986:	d9 1e       	adc	r13, r25
    1988:	d1 82       	std	Z+1, r13	; 0x01
    198a:	c0 82       	st	Z, r12
    198c:	85 e0       	ldi	r24, 0x05	; 5
    198e:	0e c0       	rjmp	.+28     	; 0x19ac <Endpoint_Read_Stream_LE+0x82>
    1990:	2d d1       	rcall	.+602    	; 0x1bec <Endpoint_WaitUntilReady>
    1992:	88 23       	and	r24, r24
    1994:	21 f3       	breq	.-56     	; 0x195e <Endpoint_Read_Stream_LE+0x34>
    1996:	0a c0       	rjmp	.+20     	; 0x19ac <Endpoint_Read_Stream_LE+0x82>
    1998:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    199c:	89 93       	st	Y+, r24
    199e:	01 50       	subi	r16, 0x01	; 1
    19a0:	11 09       	sbc	r17, r1
    19a2:	ff ef       	ldi	r31, 0xFF	; 255
    19a4:	cf 1a       	sub	r12, r31
    19a6:	df 0a       	sbc	r13, r31
    19a8:	da cf       	rjmp	.-76     	; 0x195e <Endpoint_Read_Stream_LE+0x34>
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	1f 91       	pop	r17
    19b2:	0f 91       	pop	r16
    19b4:	ff 90       	pop	r15
    19b6:	ef 90       	pop	r14
    19b8:	df 90       	pop	r13
    19ba:	cf 90       	pop	r12
    19bc:	08 95       	ret

000019be <Endpoint_Write_Control_Stream_LE>:
    19be:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <USB_ControlRequest+0x6>
    19c2:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <USB_ControlRequest+0x7>
    19c6:	26 17       	cp	r18, r22
    19c8:	37 07       	cpc	r19, r23
    19ca:	48 f0       	brcs	.+18     	; 0x19de <Endpoint_Write_Control_Stream_LE+0x20>
    19cc:	61 15       	cp	r22, r1
    19ce:	71 05       	cpc	r23, r1
    19d0:	39 f4       	brne	.+14     	; 0x19e0 <Endpoint_Write_Control_Stream_LE+0x22>
    19d2:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19d6:	2e 77       	andi	r18, 0x7E	; 126
    19d8:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19dc:	01 c0       	rjmp	.+2      	; 0x19e0 <Endpoint_Write_Control_Stream_LE+0x22>
    19de:	b9 01       	movw	r22, r18
    19e0:	fc 01       	movw	r30, r24
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	61 15       	cp	r22, r1
    19e6:	71 05       	cpc	r23, r1
    19e8:	91 f1       	breq	.+100    	; 0x1a4e <Endpoint_Write_Control_Stream_LE+0x90>
    19ea:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_DeviceState>
    19ee:	88 23       	and	r24, r24
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <Endpoint_Write_Control_Stream_LE+0x36>
    19f2:	40 c0       	rjmp	.+128    	; 0x1a74 <Endpoint_Write_Control_Stream_LE+0xb6>
    19f4:	85 30       	cpi	r24, 0x05	; 5
    19f6:	09 f4       	brne	.+2      	; 0x19fa <Endpoint_Write_Control_Stream_LE+0x3c>
    19f8:	3f c0       	rjmp	.+126    	; 0x1a78 <Endpoint_Write_Control_Stream_LE+0xba>
    19fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19fe:	83 fd       	sbrc	r24, 3
    1a00:	3d c0       	rjmp	.+122    	; 0x1a7c <Endpoint_Write_Control_Stream_LE+0xbe>
    1a02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a06:	82 fd       	sbrc	r24, 2
    1a08:	2f c0       	rjmp	.+94     	; 0x1a68 <Endpoint_Write_Control_Stream_LE+0xaa>
    1a0a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a0e:	80 ff       	sbrs	r24, 0
    1a10:	e9 cf       	rjmp	.-46     	; 0x19e4 <Endpoint_Write_Control_Stream_LE+0x26>
    1a12:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1a16:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	92 2b       	or	r25, r18
    1a1e:	61 15       	cp	r22, r1
    1a20:	71 05       	cpc	r23, r1
    1a22:	51 f0       	breq	.+20     	; 0x1a38 <Endpoint_Write_Control_Stream_LE+0x7a>
    1a24:	80 34       	cpi	r24, 0x40	; 64
    1a26:	91 05       	cpc	r25, r1
    1a28:	38 f4       	brcc	.+14     	; 0x1a38 <Endpoint_Write_Control_Stream_LE+0x7a>
    1a2a:	21 91       	ld	r18, Z+
    1a2c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1a30:	61 50       	subi	r22, 0x01	; 1
    1a32:	71 09       	sbc	r23, r1
    1a34:	01 96       	adiw	r24, 0x01	; 1
    1a36:	f3 cf       	rjmp	.-26     	; 0x1a1e <Endpoint_Write_Control_Stream_LE+0x60>
    1a38:	21 e0       	ldi	r18, 0x01	; 1
    1a3a:	80 34       	cpi	r24, 0x40	; 64
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <Endpoint_Write_Control_Stream_LE+0x84>
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a46:	8e 77       	andi	r24, 0x7E	; 126
    1a48:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a4c:	cb cf       	rjmp	.-106    	; 0x19e4 <Endpoint_Write_Control_Stream_LE+0x26>
    1a4e:	21 11       	cpse	r18, r1
    1a50:	cc cf       	rjmp	.-104    	; 0x19ea <Endpoint_Write_Control_Stream_LE+0x2c>
    1a52:	0a c0       	rjmp	.+20     	; 0x1a68 <Endpoint_Write_Control_Stream_LE+0xaa>
    1a54:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_DeviceState>
    1a58:	88 23       	and	r24, r24
    1a5a:	61 f0       	breq	.+24     	; 0x1a74 <Endpoint_Write_Control_Stream_LE+0xb6>
    1a5c:	85 30       	cpi	r24, 0x05	; 5
    1a5e:	61 f0       	breq	.+24     	; 0x1a78 <Endpoint_Write_Control_Stream_LE+0xba>
    1a60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a64:	83 fd       	sbrc	r24, 3
    1a66:	0a c0       	rjmp	.+20     	; 0x1a7c <Endpoint_Write_Control_Stream_LE+0xbe>
    1a68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a6c:	82 ff       	sbrs	r24, 2
    1a6e:	f2 cf       	rjmp	.-28     	; 0x1a54 <Endpoint_Write_Control_Stream_LE+0x96>
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	08 95       	ret
    1a74:	82 e0       	ldi	r24, 0x02	; 2
    1a76:	08 95       	ret
    1a78:	83 e0       	ldi	r24, 0x03	; 3
    1a7a:	08 95       	ret
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	08 95       	ret

00001a80 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1a80:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <USB_ControlRequest+0x6>
    1a84:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <USB_ControlRequest+0x7>
    1a88:	26 17       	cp	r18, r22
    1a8a:	37 07       	cpc	r19, r23
    1a8c:	48 f0       	brcs	.+18     	; 0x1aa0 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1a8e:	61 15       	cp	r22, r1
    1a90:	71 05       	cpc	r23, r1
    1a92:	39 f4       	brne	.+14     	; 0x1aa2 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a94:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a98:	2e 77       	andi	r18, 0x7E	; 126
    1a9a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a9e:	01 c0       	rjmp	.+2      	; 0x1aa2 <Endpoint_Write_Control_PStream_LE+0x22>
    1aa0:	b9 01       	movw	r22, r18
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1aa6:	61 15       	cp	r22, r1
    1aa8:	71 05       	cpc	r23, r1
    1aaa:	99 f1       	breq	.+102    	; 0x1b12 <Endpoint_Write_Control_PStream_LE+0x92>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1aac:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ab0:	88 23       	and	r24, r24
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <Endpoint_Write_Control_PStream_LE+0x36>
    1ab4:	41 c0       	rjmp	.+130    	; 0x1b38 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ab6:	85 30       	cpi	r24, 0x05	; 5
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <Endpoint_Write_Control_PStream_LE+0x3c>
    1aba:	40 c0       	rjmp	.+128    	; 0x1b3c <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1abc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1ac0:	83 fd       	sbrc	r24, 3
    1ac2:	3e c0       	rjmp	.+124    	; 0x1b40 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ac4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1ac8:	82 fd       	sbrc	r24, 2
    1aca:	30 c0       	rjmp	.+96     	; 0x1b2c <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1acc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
    1ad0:	80 ff       	sbrs	r24, 0
    1ad2:	e9 cf       	rjmp	.-46     	; 0x1aa6 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1ad4:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1ad8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1ae0:	61 15       	cp	r22, r1
    1ae2:	71 05       	cpc	r23, r1
    1ae4:	59 f0       	breq	.+22     	; 0x1afc <Endpoint_Write_Control_PStream_LE+0x7c>
    1ae6:	80 34       	cpi	r24, 0x40	; 64
    1ae8:	91 05       	cpc	r25, r1
    1aea:	40 f4       	brcc	.+16     	; 0x1afc <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1aec:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1aee:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1af2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1af4:	61 50       	subi	r22, 0x01	; 1
    1af6:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1af8:	01 96       	adiw	r24, 0x01	; 1
    1afa:	f2 cf       	rjmp	.-28     	; 0x1ae0 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1afc:	21 e0       	ldi	r18, 0x01	; 1
    1afe:	80 34       	cpi	r24, 0x40	; 64
    1b00:	91 05       	cpc	r25, r1
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <Endpoint_Write_Control_PStream_LE+0x86>
    1b04:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b06:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b0a:	8e 77       	andi	r24, 0x7E	; 126
    1b0c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b10:	ca cf       	rjmp	.-108    	; 0x1aa6 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1b12:	21 11       	cpse	r18, r1
    1b14:	cb cf       	rjmp	.-106    	; 0x1aac <Endpoint_Write_Control_PStream_LE+0x2c>
    1b16:	0a c0       	rjmp	.+20     	; 0x1b2c <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b18:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b1c:	88 23       	and	r24, r24
    1b1e:	61 f0       	breq	.+24     	; 0x1b38 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b20:	85 30       	cpi	r24, 0x05	; 5
    1b22:	61 f0       	breq	.+24     	; 0x1b3c <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1b28:	83 fd       	sbrc	r24, 3
    1b2a:	0a c0       	rjmp	.+20     	; 0x1b40 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1b30:	82 ff       	sbrs	r24, 2
    1b32:	f2 cf       	rjmp	.-28     	; 0x1b18 <Endpoint_Write_Control_PStream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1b38:	82 e0       	ldi	r24, 0x02	; 2
    1b3a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1b3c:	83 e0       	ldi	r24, 0x03	; 3
    1b3e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1b42:	08 95       	ret

00001b44 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1b44:	98 2f       	mov	r25, r24
    1b46:	97 30       	cpi	r25, 0x07	; 7
    1b48:	68 f5       	brcc	.+90     	; 0x1ba4 <Endpoint_ConfigureEndpoint_Prv+0x60>
    1b4a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1b4e:	98 17       	cp	r25, r24
    1b50:	39 f0       	breq	.+14     	; 0x1b60 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    1b52:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1b56:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1b5a:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1b5e:	03 c0       	rjmp	.+6      	; 0x1b66 <Endpoint_ConfigureEndpoint_Prv+0x22>
    1b60:	24 2f       	mov	r18, r20
    1b62:	76 2f       	mov	r23, r22
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    1b66:	21 fd       	sbrc	r18, 1
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <Endpoint_ConfigureEndpoint_Prv+0x2a>
    1b6a:	9f 5f       	subi	r25, 0xFF	; 255
    1b6c:	ec cf       	rjmp	.-40     	; 0x1b46 <Endpoint_ConfigureEndpoint_Prv+0x2>
    1b6e:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1b72:	3e 7f       	andi	r19, 0xFE	; 254
    1b74:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1b78:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1b7c:	3d 7f       	andi	r19, 0xFD	; 253
    1b7e:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1b82:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1b86:	31 60       	ori	r19, 0x01	; 1
    1b88:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1b8c:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1b90:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1b94:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1b98:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1b9c:	27 fd       	sbrc	r18, 7
    1b9e:	e5 cf       	rjmp	.-54     	; 0x1b6a <Endpoint_ConfigureEndpoint_Prv+0x26>
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	08 95       	ret
    1ba4:	8f 70       	andi	r24, 0x0F	; 15
    1ba6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	08 95       	ret

00001bae <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1bae:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_ControlRequest>
    1bb2:	87 ff       	sbrs	r24, 7
    1bb4:	11 c0       	rjmp	.+34     	; 0x1bd8 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1bb6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1bba:	82 fd       	sbrc	r24, 2
    1bbc:	05 c0       	rjmp	.+10     	; 0x1bc8 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1bbe:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_DeviceState>
    1bc2:	81 11       	cpse	r24, r1
    1bc4:	f8 cf       	rjmp	.-16     	; 0x1bb6 <Endpoint_ClearStatusStage+0x8>
    1bc6:	11 c0       	rjmp	.+34     	; 0x1bea <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1bc8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bcc:	8b 77       	andi	r24, 0x7B	; 123
    1bce:	0b c0       	rjmp	.+22     	; 0x1be6 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1bd0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_DeviceState>
    1bd4:	88 23       	and	r24, r24
    1bd6:	49 f0       	breq	.+18     	; 0x1bea <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1bd8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1bdc:	80 ff       	sbrs	r24, 0
    1bde:	f8 cf       	rjmp	.-16     	; 0x1bd0 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1be0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1be4:	8e 77       	andi	r24, 0x7E	; 126
    1be6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bea:	08 95       	ret

00001bec <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1bec:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1bf0:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1bf4:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1bf6:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1bfa:	84 2f       	mov	r24, r20
    1bfc:	81 70       	andi	r24, 0x01	; 1
    1bfe:	40 ff       	sbrs	r20, 0
    1c00:	23 c0       	rjmp	.+70     	; 0x1c48 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1c06:	80 fd       	sbrc	r24, 0
    1c08:	1d c0       	rjmp	.+58     	; 0x1c44 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c0a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c0e:	88 23       	and	r24, r24
    1c10:	99 f0       	breq	.+38     	; 0x1c38 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c12:	85 30       	cpi	r24, 0x05	; 5
    1c14:	99 f0       	breq	.+38     	; 0x1c3c <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1c16:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1c1a:	85 fd       	sbrc	r24, 5
    1c1c:	11 c0       	rjmp	.+34     	; 0x1c40 <Endpoint_WaitUntilReady+0x54>
    1c1e:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1c22:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1c26:	24 17       	cp	r18, r20
    1c28:	35 07       	cpc	r19, r21
    1c2a:	29 f3       	breq	.-54     	; 0x1bf6 <Endpoint_WaitUntilReady+0xa>
    1c2c:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1c2e:	11 f0       	breq	.+4      	; 0x1c34 <Endpoint_WaitUntilReady+0x48>
    1c30:	9a 01       	movw	r18, r20
    1c32:	e1 cf       	rjmp	.-62     	; 0x1bf6 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1c34:	84 e0       	ldi	r24, 0x04	; 4
    1c36:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1c38:	82 e0       	ldi	r24, 0x02	; 2
    1c3a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1c3c:	83 e0       	ldi	r24, 0x03	; 3
    1c3e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c48:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1c4c:	42 ff       	sbrs	r20, 2
    1c4e:	dd cf       	rjmp	.-70     	; 0x1c0a <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1c50:	08 95       	ret

00001c52 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	cf 93       	push	r28
    1c58:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1c5a:	4b d0       	rcall	.+150    	; 0x1cf2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1c5c:	52 d0       	rcall	.+164    	; 0x1d02 <USB_INT_ClearAllInterrupts>
    1c5e:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1c60:	d0 e0       	ldi	r29, 0x00	; 0
    1c62:	88 81       	ld	r24, Y
    1c64:	8f 77       	andi	r24, 0x7F	; 127
    1c66:	88 83       	st	Y, r24
    1c68:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    1c6a:	80 68       	ori	r24, 0x80	; 128
    1c6c:	88 83       	st	Y, r24
    1c6e:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c70:	8f 7d       	andi	r24, 0xDF	; 223
    1c72:	88 83       	st	Y, r24
    1c74:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c76:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1c7a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    1c7e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1c82:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1c86:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1c88:	10 e0       	ldi	r17, 0x00	; 0
    1c8a:	f8 01       	movw	r30, r16
    1c8c:	80 81       	ld	r24, Z
    1c8e:	8b 7f       	andi	r24, 0xFB	; 251
    1c90:	80 83       	st	Z, r24
    1c92:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1c94:	81 60       	ori	r24, 0x01	; 1
    1c96:	88 83       	st	Y, r24
    1c98:	42 e3       	ldi	r20, 0x32	; 50
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	52 df       	rcall	.-348    	; 0x1b44 <Endpoint_ConfigureEndpoint_Prv>
    1ca0:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	8e 7f       	andi	r24, 0xFE	; 254
    1ca8:	80 83       	st	Z, r24
    1caa:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	81 60       	ori	r24, 0x01	; 1
    1cb2:	80 83       	st	Z, r24
    1cb4:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1cb6:	88 60       	ori	r24, 0x08	; 8
    1cb8:	80 83       	st	Z, r24
    1cba:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1cbc:	80 81       	ld	r24, Z
    1cbe:	8e 7f       	andi	r24, 0xFE	; 254
    1cc0:	80 83       	st	Z, r24
    1cc2:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1cc4:	80 61       	ori	r24, 0x10	; 16
    1cc6:	88 83       	st	Y, r24
    1cc8:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1cca:	cf 91       	pop	r28
    1ccc:	1f 91       	pop	r17
    1cce:	0f 91       	pop	r16
    1cd0:	08 95       	ret

00001cd2 <USB_Init>:
    1cd2:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	8f 7e       	andi	r24, 0xEF	; 239
    1cda:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1cdc:	e7 ed       	ldi	r30, 0xD7	; 215
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	81 60       	ori	r24, 0x01	; 1
    1ce4:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1ce6:	84 e0       	ldi	r24, 0x04	; 4
    1ce8:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_IsInitialized>

	USB_ResetInterface();
    1cf0:	b0 cf       	rjmp	.-160    	; 0x1c52 <USB_ResetInterface>

00001cf2 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1cf2:	e8 ed       	ldi	r30, 0xD8	; 216
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	8e 7f       	andi	r24, 0xFE	; 254
    1cfa:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1cfc:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1d00:	08 95       	ret

00001d02 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1d02:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1d06:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1d0a:	08 95       	ret

00001d0c <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1d0c:	1f 92       	push	r1
    1d0e:	0f 92       	push	r0
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	0f 92       	push	r0
    1d14:	11 24       	eor	r1, r1
    1d16:	2f 93       	push	r18
    1d18:	3f 93       	push	r19
    1d1a:	4f 93       	push	r20
    1d1c:	5f 93       	push	r21
    1d1e:	6f 93       	push	r22
    1d20:	7f 93       	push	r23
    1d22:	8f 93       	push	r24
    1d24:	9f 93       	push	r25
    1d26:	af 93       	push	r26
    1d28:	bf 93       	push	r27
    1d2a:	ef 93       	push	r30
    1d2c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1d2e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1d32:	82 ff       	sbrs	r24, 2
    1d34:	0a c0       	rjmp	.+20     	; 0x1d4a <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1d36:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1d3a:	82 ff       	sbrs	r24, 2
    1d3c:	06 c0       	rjmp	.+12     	; 0x1d4a <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1d3e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1d42:	8b 7f       	andi	r24, 0xFB	; 251
    1d44:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1d48:	08 d2       	rcall	.+1040   	; 0x215a <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1d4a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1d4e:	80 ff       	sbrs	r24, 0
    1d50:	1d c0       	rjmp	.+58     	; 0x1d8c <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1d52:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1d56:	80 ff       	sbrs	r24, 0
    1d58:	19 c0       	rjmp	.+50     	; 0x1d8c <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1d5a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1d5e:	8e 7f       	andi	r24, 0xFE	; 254
    1d60:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1d64:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1d68:	80 ff       	sbrs	r24, 0
    1d6a:	0c c0       	rjmp	.+24     	; 0x1d84 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d6c:	80 e1       	ldi	r24, 0x10	; 16
    1d6e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d70:	82 e1       	ldi	r24, 0x12	; 18
    1d72:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1d74:	09 b4       	in	r0, 0x29	; 41
    1d76:	00 fe       	sbrs	r0, 0
    1d78:	fd cf       	rjmp	.-6      	; 0x1d74 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1d80:	8c db       	rcall	.-2280   	; 0x149a <EVENT_USB_Device_Connect>
    1d82:	04 c0       	rjmp	.+8      	; 0x1d8c <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d84:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1d86:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1d8a:	88 db       	rcall	.-2288   	; 0x149c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1d8c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1d90:	80 ff       	sbrs	r24, 0
    1d92:	18 c0       	rjmp	.+48     	; 0x1dc4 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1d94:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1d98:	80 ff       	sbrs	r24, 0
    1d9a:	14 c0       	rjmp	.+40     	; 0x1dc4 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d9c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1da0:	8e 7f       	andi	r24, 0xFE	; 254
    1da2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1da6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1daa:	80 61       	ori	r24, 0x10	; 16
    1dac:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1db0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1db4:	80 62       	ori	r24, 0x20	; 32
    1db6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1dba:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1dbc:	85 e0       	ldi	r24, 0x05	; 5
    1dbe:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1dc2:	cb d1       	rcall	.+918    	; 0x215a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1dc4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1dc8:	84 ff       	sbrs	r24, 4
    1dca:	2f c0       	rjmp	.+94     	; 0x1e2a <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1dcc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1dd0:	84 ff       	sbrs	r24, 4
    1dd2:	2b c0       	rjmp	.+86     	; 0x1e2a <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1dd4:	80 e1       	ldi	r24, 0x10	; 16
    1dd6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1dd8:	82 e1       	ldi	r24, 0x12	; 18
    1dda:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1ddc:	09 b4       	in	r0, 0x29	; 41
    1dde:	00 fe       	sbrs	r0, 0
    1de0:	fd cf       	rjmp	.-6      	; 0x1ddc <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1de2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1de6:	8f 7d       	andi	r24, 0xDF	; 223
    1de8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1dec:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1df0:	8f 7e       	andi	r24, 0xEF	; 239
    1df2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1df6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1dfa:	8f 7e       	andi	r24, 0xEF	; 239
    1dfc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1e00:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e04:	81 60       	ori	r24, 0x01	; 1
    1e06:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1e0a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_Device_ConfigurationNumber>
    1e0e:	88 23       	and	r24, r24
    1e10:	11 f0       	breq	.+4      	; 0x1e16 <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1e12:	84 e0       	ldi	r24, 0x04	; 4
    1e14:	07 c0       	rjmp	.+14     	; 0x1e24 <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1e16:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1e1a:	87 fd       	sbrc	r24, 7
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <__vector_10+0x116>
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	01 c0       	rjmp	.+2      	; 0x1e24 <__vector_10+0x118>
    1e22:	83 e0       	ldi	r24, 0x03	; 3
    1e24:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1e28:	98 d1       	rcall	.+816    	; 0x215a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1e2a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1e2e:	83 ff       	sbrs	r24, 3
    1e30:	22 c0       	rjmp	.+68     	; 0x1e76 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1e32:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e36:	83 ff       	sbrs	r24, 3
    1e38:	1e c0       	rjmp	.+60     	; 0x1e76 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1e3a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1e3e:	87 7f       	andi	r24, 0xF7	; 247
    1e40:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1e4a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1e4e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1e52:	8e 7f       	andi	r24, 0xFE	; 254
    1e54:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1e58:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e5c:	8e 7f       	andi	r24, 0xFE	; 254
    1e5e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1e62:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e66:	80 61       	ori	r24, 0x10	; 16
    1e68:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1e6c:	42 e3       	ldi	r20, 0x32	; 50
    1e6e:	60 e0       	ldi	r22, 0x00	; 0
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	68 de       	rcall	.-816    	; 0x1b44 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1e74:	72 d1       	rcall	.+740    	; 0x215a <USB_Event_Stub>
    1e76:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1e78:	ef 91       	pop	r30
    1e7a:	bf 91       	pop	r27
    1e7c:	af 91       	pop	r26
    1e7e:	9f 91       	pop	r25
    1e80:	8f 91       	pop	r24
    1e82:	7f 91       	pop	r23
    1e84:	6f 91       	pop	r22
    1e86:	5f 91       	pop	r21
    1e88:	4f 91       	pop	r20
    1e8a:	3f 91       	pop	r19
    1e8c:	2f 91       	pop	r18
    1e8e:	0f 90       	pop	r0
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	0f 90       	pop	r0
    1e94:	1f 90       	pop	r1
    1e96:	18 95       	reti

00001e98 <USB_Device_ProcessControlRequest>:
    1e98:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	aa 97       	sbiw	r28, 0x2a	; 42
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	cd bf       	out	0x3d, r28	; 61
    1eae:	ea e1       	ldi	r30, 0x1A	; 26
    1eb0:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1eb2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1eb6:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1eb8:	21 e0       	ldi	r18, 0x01	; 1
    1eba:	e2 32       	cpi	r30, 0x22	; 34
    1ebc:	f2 07       	cpc	r31, r18
    1ebe:	c9 f7       	brne	.-14     	; 0x1eb2 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1ec0:	f6 da       	rcall	.-2580   	; 0x14ae <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1ec2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1ec6:	83 ff       	sbrs	r24, 3
    1ec8:	30 c1       	rjmp	.+608    	; 0x212a <USB_Device_ProcessControlRequest+0x292>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1eca:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1ece:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <USB_ControlRequest+0x1>
    1ed2:	95 30       	cpi	r25, 0x05	; 5
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <USB_Device_ProcessControlRequest+0x40>
    1ed6:	83 c0       	rjmp	.+262    	; 0x1fde <USB_Device_ProcessControlRequest+0x146>
    1ed8:	30 f4       	brcc	.+12     	; 0x1ee6 <USB_Device_ProcessControlRequest+0x4e>
    1eda:	91 30       	cpi	r25, 0x01	; 1
    1edc:	a9 f1       	breq	.+106    	; 0x1f48 <USB_Device_ProcessControlRequest+0xb0>
    1ede:	68 f0       	brcs	.+26     	; 0x1efa <USB_Device_ProcessControlRequest+0x62>
    1ee0:	93 30       	cpi	r25, 0x03	; 3
    1ee2:	91 f1       	breq	.+100    	; 0x1f48 <USB_Device_ProcessControlRequest+0xb0>
    1ee4:	22 c1       	rjmp	.+580    	; 0x212a <USB_Device_ProcessControlRequest+0x292>
    1ee6:	98 30       	cpi	r25, 0x08	; 8
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <USB_Device_ProcessControlRequest+0x54>
    1eea:	ef c0       	rjmp	.+478    	; 0x20ca <USB_Device_ProcessControlRequest+0x232>
    1eec:	99 30       	cpi	r25, 0x09	; 9
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <USB_Device_ProcessControlRequest+0x5a>
    1ef0:	fb c0       	rjmp	.+502    	; 0x20e8 <USB_Device_ProcessControlRequest+0x250>
    1ef2:	96 30       	cpi	r25, 0x06	; 6
    1ef4:	09 f0       	breq	.+2      	; 0x1ef8 <USB_Device_ProcessControlRequest+0x60>
    1ef6:	19 c1       	rjmp	.+562    	; 0x212a <USB_Device_ProcessControlRequest+0x292>
    1ef8:	94 c0       	rjmp	.+296    	; 0x2022 <USB_Device_ProcessControlRequest+0x18a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1efa:	80 38       	cpi	r24, 0x80	; 128
    1efc:	21 f0       	breq	.+8      	; 0x1f06 <USB_Device_ProcessControlRequest+0x6e>
    1efe:	82 38       	cpi	r24, 0x82	; 130
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <USB_Device_ProcessControlRequest+0x6c>
    1f02:	13 c1       	rjmp	.+550    	; 0x212a <USB_Device_ProcessControlRequest+0x292>
    1f04:	08 c0       	rjmp	.+16     	; 0x1f16 <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1f06:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1f0a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <USB_Device_RemoteWakeupEnabled>
    1f0e:	99 23       	and	r25, r25
    1f10:	89 f0       	breq	.+34     	; 0x1f34 <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1f12:	82 60       	ori	r24, 0x02	; 2
    1f14:	0f c0       	rjmp	.+30     	; 0x1f34 <USB_Device_ProcessControlRequest+0x9c>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1f16:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <USB_ControlRequest+0x4>
    1f1a:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1f1c:	87 30       	cpi	r24, 0x07	; 7
    1f1e:	08 f0       	brcs	.+2      	; 0x1f22 <USB_Device_ProcessControlRequest+0x8a>
    1f20:	04 c1       	rjmp	.+520    	; 0x212a <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f22:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1f26:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    1f2a:	85 fb       	bst	r24, 5
    1f2c:	88 27       	eor	r24, r24
    1f2e:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f30:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f34:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f38:	97 7f       	andi	r25, 0xF7	; 247
    1f3a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1f3e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1f42:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1f46:	cc c0       	rjmp	.+408    	; 0x20e0 <USB_Device_ProcessControlRequest+0x248>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f48:	28 2f       	mov	r18, r24
    1f4a:	2d 7f       	andi	r18, 0xFD	; 253
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <USB_Device_ProcessControlRequest+0xb8>
    1f4e:	ed c0       	rjmp	.+474    	; 0x212a <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1f50:	88 23       	and	r24, r24
    1f52:	19 f0       	breq	.+6      	; 0x1f5a <USB_Device_ProcessControlRequest+0xc2>
    1f54:	82 30       	cpi	r24, 0x02	; 2
    1f56:	61 f0       	breq	.+24     	; 0x1f70 <USB_Device_ProcessControlRequest+0xd8>
    1f58:	e8 c0       	rjmp	.+464    	; 0x212a <USB_Device_ProcessControlRequest+0x292>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1f5a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_ControlRequest+0x2>
    1f5e:	81 30       	cpi	r24, 0x01	; 1
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <USB_Device_ProcessControlRequest+0xcc>
    1f62:	e3 c0       	rjmp	.+454    	; 0x212a <USB_Device_ProcessControlRequest+0x292>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1f64:	93 30       	cpi	r25, 0x03	; 3
    1f66:	09 f0       	breq	.+2      	; 0x1f6a <USB_Device_ProcessControlRequest+0xd2>
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <USB_Device_RemoteWakeupEnabled>
    1f6e:	2e c0       	rjmp	.+92     	; 0x1fcc <USB_Device_ProcessControlRequest+0x134>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1f70:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_ControlRequest+0x2>
    1f74:	81 11       	cpse	r24, r1
    1f76:	2a c0       	rjmp	.+84     	; 0x1fcc <USB_Device_ProcessControlRequest+0x134>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1f78:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <USB_ControlRequest+0x4>
    1f7c:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1f7e:	2f ef       	ldi	r18, 0xFF	; 255
    1f80:	28 0f       	add	r18, r24
    1f82:	26 30       	cpi	r18, 0x06	; 6
    1f84:	08 f0       	brcs	.+2      	; 0x1f88 <USB_Device_ProcessControlRequest+0xf0>
    1f86:	d1 c0       	rjmp	.+418    	; 0x212a <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f88:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1f8c:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1f90:	20 ff       	sbrs	r18, 0
    1f92:	1c c0       	rjmp	.+56     	; 0x1fcc <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1f94:	93 30       	cpi	r25, 0x03	; 3
    1f96:	21 f4       	brne	.+8      	; 0x1fa0 <USB_Device_ProcessControlRequest+0x108>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f98:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1f9c:	80 62       	ori	r24, 0x20	; 32
    1f9e:	14 c0       	rjmp	.+40     	; 0x1fc8 <USB_Device_ProcessControlRequest+0x130>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1fa0:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1fa4:	90 61       	ori	r25, 0x10	; 16
    1fa6:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1faa:	21 e0       	ldi	r18, 0x01	; 1
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	a9 01       	movw	r20, r18
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <USB_Device_ProcessControlRequest+0x11e>
    1fb2:	44 0f       	add	r20, r20
    1fb4:	55 1f       	adc	r21, r21
    1fb6:	8a 95       	dec	r24
    1fb8:	e2 f7       	brpl	.-8      	; 0x1fb2 <USB_Device_ProcessControlRequest+0x11a>
    1fba:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1fbe:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1fc2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1fc6:	88 60       	ori	r24, 0x08	; 8
    1fc8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fcc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fd0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1fd4:	87 7f       	andi	r24, 0xF7	; 247
    1fd6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1fda:	e9 dd       	rcall	.-1070   	; 0x1bae <Endpoint_ClearStatusStage>
    1fdc:	a6 c0       	rjmp	.+332    	; 0x212a <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1fde:	81 11       	cpse	r24, r1
    1fe0:	a4 c0       	rjmp	.+328    	; 0x212a <USB_Device_ProcessControlRequest+0x292>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1fe2:	10 91 1c 01 	lds	r17, 0x011C	; 0x80011c <USB_ControlRequest+0x2>
    1fe6:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1fe8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1fec:	80 78       	andi	r24, 0x80	; 128
    1fee:	81 2b       	or	r24, r17
    1ff0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1ff4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ff8:	87 7f       	andi	r24, 0xF7	; 247
    1ffa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1ffe:	d7 dd       	rcall	.-1106   	; 0x1bae <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2000:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    2004:	80 ff       	sbrs	r24, 0
    2006:	fc cf       	rjmp	.-8      	; 0x2000 <USB_Device_ProcessControlRequest+0x168>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2008:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    200c:	80 68       	ori	r24, 0x80	; 128
    200e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2012:	11 11       	cpse	r17, r1
    2014:	02 c0       	rjmp	.+4      	; 0x201a <USB_Device_ProcessControlRequest+0x182>
    2016:	82 e0       	ldi	r24, 0x02	; 2
    2018:	01 c0       	rjmp	.+2      	; 0x201c <USB_Device_ProcessControlRequest+0x184>
    201a:	83 e0       	ldi	r24, 0x03	; 3
    201c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <USB_DeviceState>
    2020:	84 c0       	rjmp	.+264    	; 0x212a <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2022:	80 58       	subi	r24, 0x80	; 128
    2024:	82 30       	cpi	r24, 0x02	; 2
    2026:	08 f0       	brcs	.+2      	; 0x202a <USB_Device_ProcessControlRequest+0x192>
    2028:	80 c0       	rjmp	.+256    	; 0x212a <USB_Device_ProcessControlRequest+0x292>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    202a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_ControlRequest+0x2>
    202e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <USB_ControlRequest+0x3>
    2032:	8c 3d       	cpi	r24, 0xDC	; 220
    2034:	53 e0       	ldi	r21, 0x03	; 3
    2036:	95 07       	cpc	r25, r21
    2038:	71 f5       	brne	.+92     	; 0x2096 <USB_Device_ProcessControlRequest+0x1fe>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    203a:	83 e0       	ldi	r24, 0x03	; 3
    203c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    203e:	8a e2       	ldi	r24, 0x2A	; 42
    2040:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2042:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2044:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2046:	de 01       	movw	r26, r28
    2048:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    204a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    204c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    204e:	51 e2       	ldi	r21, 0x21	; 33
    2050:	e3 2f       	mov	r30, r19
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    2058:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    205a:	20 ff       	sbrs	r18, 0
    205c:	03 c0       	rjmp	.+6      	; 0x2064 <USB_Device_ProcessControlRequest+0x1cc>
					{
						SerialByte >>= 4;
    205e:	e2 95       	swap	r30
    2060:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    2062:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2064:	ef 70       	andi	r30, 0x0F	; 15
    2066:	8e 2f       	mov	r24, r30
    2068:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    206a:	ea 30       	cpi	r30, 0x0A	; 10
    206c:	10 f0       	brcs	.+4      	; 0x2072 <USB_Device_ProcessControlRequest+0x1da>
    206e:	c7 96       	adiw	r24, 0x37	; 55
    2070:	01 c0       	rjmp	.+2      	; 0x2074 <USB_Device_ProcessControlRequest+0x1dc>
    2072:	c0 96       	adiw	r24, 0x30	; 48
    2074:	8d 93       	st	X+, r24
    2076:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2078:	2f 5f       	subi	r18, 0xFF	; 255
    207a:	24 31       	cpi	r18, 0x14	; 20
    207c:	49 f7       	brne	.-46     	; 0x2050 <USB_Device_ProcessControlRequest+0x1b8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    207e:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2080:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2084:	87 7f       	andi	r24, 0xF7	; 247
    2086:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    208a:	6a e2       	ldi	r22, 0x2A	; 42
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	ce 01       	movw	r24, r28
    2090:	01 96       	adiw	r24, 0x01	; 1
    2092:	95 dc       	rcall	.-1750   	; 0x19be <Endpoint_Write_Control_Stream_LE>
    2094:	14 c0       	rjmp	.+40     	; 0x20be <USB_Device_ProcessControlRequest+0x226>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2096:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <USB_ControlRequest+0x4>
    209a:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <USB_ControlRequest+0x5>
    209e:	ae 01       	movw	r20, r28
    20a0:	4f 5f       	subi	r20, 0xFF	; 255
    20a2:	5f 4f       	sbci	r21, 0xFF	; 255
    20a4:	b7 db       	rcall	.-2194   	; 0x1814 <CALLBACK_USB_GetDescriptor>
    20a6:	bc 01       	movw	r22, r24
    20a8:	89 2b       	or	r24, r25
    20aa:	09 f4       	brne	.+2      	; 0x20ae <USB_Device_ProcessControlRequest+0x216>
    20ac:	3e c0       	rjmp	.+124    	; 0x212a <USB_Device_ProcessControlRequest+0x292>
    20ae:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20b2:	97 7f       	andi	r25, 0xF7	; 247
    20b4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	9a 81       	ldd	r25, Y+2	; 0x02
    20bc:	e1 dc       	rcall	.-1598   	; 0x1a80 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    20be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20c2:	8b 77       	andi	r24, 0x7B	; 123
    20c4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20c8:	30 c0       	rjmp	.+96     	; 0x212a <USB_Device_ProcessControlRequest+0x292>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    20ca:	80 38       	cpi	r24, 0x80	; 128
    20cc:	71 f5       	brne	.+92     	; 0x212a <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20d2:	87 7f       	andi	r24, 0xF7	; 247
    20d4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    20d8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    20dc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20e4:	8e 77       	andi	r24, 0x7E	; 126
    20e6:	77 cf       	rjmp	.-274    	; 0x1fd6 <USB_Device_ProcessControlRequest+0x13e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    20e8:	81 11       	cpse	r24, r1
    20ea:	1f c0       	rjmp	.+62     	; 0x212a <USB_Device_ProcessControlRequest+0x292>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    20ec:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_ControlRequest+0x2>
    20f0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <USB_ControlRequest+0x3>
    20f4:	99 27       	eor	r25, r25
    20f6:	02 97       	sbiw	r24, 0x02	; 2
    20f8:	c4 f4       	brge	.+48     	; 0x212a <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20fe:	87 7f       	andi	r24, 0xF7	; 247
    2100:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2104:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_ControlRequest+0x2>
    2108:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    210c:	50 dd       	rcall	.-1376   	; 0x1bae <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    210e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_Device_ConfigurationNumber>
    2112:	81 11       	cpse	r24, r1
    2114:	06 c0       	rjmp	.+12     	; 0x2122 <USB_Device_ProcessControlRequest+0x28a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2116:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    211a:	87 fd       	sbrc	r24, 7
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <USB_Device_ProcessControlRequest+0x28a>
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	01 c0       	rjmp	.+2      	; 0x2124 <USB_Device_ProcessControlRequest+0x28c>
    2122:	84 e0       	ldi	r24, 0x04	; 4
    2124:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    2128:	ba d9       	rcall	.-3212   	; 0x149e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    212a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    212e:	83 ff       	sbrs	r24, 3
    2130:	0a c0       	rjmp	.+20     	; 0x2146 <USB_Device_ProcessControlRequest+0x2ae>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2132:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2136:	87 7f       	andi	r24, 0xF7	; 247
    2138:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    213c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2140:	80 62       	ori	r24, 0x20	; 32
    2142:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2146:	aa 96       	adiw	r28, 0x2a	; 42
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	df 91       	pop	r29
    2154:	cf 91       	pop	r28
    2156:	1f 91       	pop	r17
    2158:	08 95       	ret

0000215a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    215a:	08 95       	ret

0000215c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    215c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    215e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_DeviceState>
    2162:	88 23       	and	r24, r24
    2164:	99 f0       	breq	.+38     	; 0x218c <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2166:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    216a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    216c:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2170:	89 2f       	mov	r24, r25
    2172:	81 70       	andi	r24, 0x01	; 1
    2174:	90 fd       	sbrc	r25, 0
    2176:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2178:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    217a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    217e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2182:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    2184:	89 de       	rcall	.-750    	; 0x1e98 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2186:	cf 70       	andi	r28, 0x0F	; 15
    2188:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    218c:	cf 91       	pop	r28
    218e:	08 95       	ret

00002190 <__divmodhi4>:
    2190:	97 fb       	bst	r25, 7
    2192:	07 2e       	mov	r0, r23
    2194:	16 f4       	brtc	.+4      	; 0x219a <__divmodhi4+0xa>
    2196:	00 94       	com	r0
    2198:	06 d0       	rcall	.+12     	; 0x21a6 <__divmodhi4_neg1>
    219a:	77 fd       	sbrc	r23, 7
    219c:	08 d0       	rcall	.+16     	; 0x21ae <__divmodhi4_neg2>
    219e:	0b d0       	rcall	.+22     	; 0x21b6 <__udivmodhi4>
    21a0:	07 fc       	sbrc	r0, 7
    21a2:	05 d0       	rcall	.+10     	; 0x21ae <__divmodhi4_neg2>
    21a4:	3e f4       	brtc	.+14     	; 0x21b4 <__divmodhi4_exit>

000021a6 <__divmodhi4_neg1>:
    21a6:	90 95       	com	r25
    21a8:	81 95       	neg	r24
    21aa:	9f 4f       	sbci	r25, 0xFF	; 255
    21ac:	08 95       	ret

000021ae <__divmodhi4_neg2>:
    21ae:	70 95       	com	r23
    21b0:	61 95       	neg	r22
    21b2:	7f 4f       	sbci	r23, 0xFF	; 255

000021b4 <__divmodhi4_exit>:
    21b4:	08 95       	ret

000021b6 <__udivmodhi4>:
    21b6:	aa 1b       	sub	r26, r26
    21b8:	bb 1b       	sub	r27, r27
    21ba:	51 e1       	ldi	r21, 0x11	; 17
    21bc:	07 c0       	rjmp	.+14     	; 0x21cc <__udivmodhi4_ep>

000021be <__udivmodhi4_loop>:
    21be:	aa 1f       	adc	r26, r26
    21c0:	bb 1f       	adc	r27, r27
    21c2:	a6 17       	cp	r26, r22
    21c4:	b7 07       	cpc	r27, r23
    21c6:	10 f0       	brcs	.+4      	; 0x21cc <__udivmodhi4_ep>
    21c8:	a6 1b       	sub	r26, r22
    21ca:	b7 0b       	sbc	r27, r23

000021cc <__udivmodhi4_ep>:
    21cc:	88 1f       	adc	r24, r24
    21ce:	99 1f       	adc	r25, r25
    21d0:	5a 95       	dec	r21
    21d2:	a9 f7       	brne	.-22     	; 0x21be <__udivmodhi4_loop>
    21d4:	80 95       	com	r24
    21d6:	90 95       	com	r25
    21d8:	bc 01       	movw	r22, r24
    21da:	cd 01       	movw	r24, r26
    21dc:	08 95       	ret

000021de <_exit>:
    21de:	f8 94       	cli

000021e0 <__stop_program>:
    21e0:	ff cf       	rjmp	.-2      	; 0x21e0 <__stop_program>
